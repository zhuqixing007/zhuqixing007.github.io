<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A02-零基础React博客项目-项目配置&amp;主页布局</title>
      <link href="/1127834142.html"/>
      <url>/1127834142.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装相关React的包"><a href="#安装相关React的包" class="headerlink" title="安装相关React的包"></a>安装相关React的包</h1><p>点击webstrom左下角<code>Terminal</code>，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add react-router-dom redux react-redux history</span><br></pre></td></tr></table></figure><ul><li><code>react-router-dom</code>用于路由，与页面跳转有关</li><li><code>redux</code>和<code>react-redux</code>与React数据管理有关，很重要，后面用到会细说</li><li><code>history</code>用作当前网页浏览器历史记录</li></ul><h1 id="目录调整"><a href="#目录调整" class="headerlink" title="目录调整"></a>目录调整</h1><ol><li><p>删除src目录下除了<code>App.js</code>和<code>index.js</code>以外的所有文件，删除的时候不要勾选<code>Safe delete</code>。</p></li><li><p>在src目录下创建pages文件夹，在pages文件夹下创建<code>home.js</code>，写入如下代码，代码讲解见注释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="comment">// React中一个重要的概念就是组件，组件可以分为函数组件和类组件</span></span><br><span class="line">    <span class="comment">// 这里创建了一个类组件，继承Component，这是一个最基本类组件的模板</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">// return返回的是前端视图，在react中，前端视图都在组件的return中编辑，这一点区别于传统前端开发</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                hello world!</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Home; /</span><span class="regexp">/ 将组件暴露给外部，使得组件可以被外部访问调用</span></span><br></pre></td></tr></table></figure></li><li><p>将<code>index.js</code>中的代码用下面的代码替换：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App"</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;App /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>将<code>App.js</code>中的代码用下面的代码替换：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Switch, Route&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span></span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory &#125; <span class="keyword">from</span> <span class="string">"history"</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"./pages/home"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createBrowserHistory(); <span class="comment">// 创建浏览器历史记录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=&#123;<span class="string">"/"</span>&#125; component=&#123;Home&#125;/&gt;</span><br><span class="line">        &#123;<span class="comment">/*  这里定义了一个路由，即网站的根目录 */</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>完成上述步骤之后，点击运行，你就会在浏览器中看到你自己写的“hello world!”了。</p><p>这里简单说一下目前为止的react工作流程：</p><blockquote><p>首先index.js通过绑定页面根节点而成为入口，接下来调用App.js中定义的App组件，根据App组件配置的路由访问不同的页面，我们将Home组件的路由地址设置为”/“也就是网站的根目录，用此通过 <a href="http://localhost:3000访问到的就是Home组件中定义的视图。" target="_blank" rel="noopener">http://localhost:3000访问到的就是Home组件中定义的视图。</a></p></blockquote></li></ol><h1 id="模板组件"><a href="#模板组件" class="headerlink" title="模板组件"></a>模板组件</h1><p>在浏览我的博客网站时，如果你足够细心，你应该能够发现，无论当前在哪一个标签下，网页整体布局是没有发生太大变化的，总体来看符合左右结构，而右边则是上下结构，也就是说网页似乎在按照某个模版在显示，那么我们下面就来实现这个布局，首先在src目录下创建template文件夹，然后在template文件夹下面创建<code>template.js</code>，写入如下代码，代码说明见注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// 这是一个很常见的页面布局，先是左右结构，然后在左边继续分割为上下结构</span></span><br><span class="line">            <span class="comment">// div是html中的块级盒子，他会独自占据一行，因此光是下面的代码并没有达到我们要的布局效果</span></span><br><span class="line">            <span class="comment">// 我们还需要配合css实现页面布局，className就是在写css时的类选择器</span></span><br><span class="line">            &lt;div className=&#123;<span class="string">"fatherBox"</span>&#125;&gt;</span><br><span class="line">                &lt;div className=&#123;<span class="string">"leftBox"</span>&#125;&gt;</span><br><span class="line">                    &lt;div className=&#123;<span class="string">"leftTopBox"</span>&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                    &lt;div className=&#123;<span class="string">"leftBottomBox"</span>&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div className=&#123;"rightBox"&#125;&gt;&lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Template;</span></span><br></pre></td></tr></table></figure><p>以上代码实现了页面的结构，下面我们用css来实现页面的布局，在template目录下创建<code>template.css</code>，写入如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 为通配符，匹配所有元素</span></span><br><span class="line"><span class="comment">       margin 为当前元素与父级元素的边框距离</span></span><br><span class="line"><span class="comment">       padding 为当前元素的内边距</span></span><br><span class="line"><span class="comment">       都设置为0表示所有元素都在父级元素的左上角且不留空隙</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fatherBox</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto <span class="number">0</span>; <span class="comment">/*居中显示*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">810px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">510px</span>;</span><br><span class="line">    <span class="attribute">background</span>: burlywood; <span class="comment">/*用背景色只是为了能看到盒子*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.leftBox</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left; <span class="comment">/* 向左浮动，浮动可以让块级元素不受流式布局的影响 如果不理解你可以试试去掉浮动的代码，看显示效果很容易就明白了*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">510px</span>;</span><br><span class="line">    <span class="attribute">background</span>: cadetblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftTopBox</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: top;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">background</span>: darkkhaki;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftBottomBox</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: top;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">background</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rightBox</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">510px</span>;</span><br><span class="line">    <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>template.js</code>最上面写入<code>import &quot;./template.css&quot;</code>引用这个css样式，最后在<code>home.js</code>中引用定义好的模版组件，修改<code>home.js</code>为如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Template <span class="keyword">from</span> <span class="string">"../template/template"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Template /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><p>现在打开浏览器查看效果吧。</p>]]></content>
      
      
      <categories>
          
          <category> A-React博客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A01-零基础React博客项目-环境准备</title>
      <link href="/3633354621.html"/>
      <url>/3633354621.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个系列教程，命名以A开头，数字表示教程序号，可以在左侧导航栏分类标签中选择<code>A-React博客项目</code>查看本系列所有教程。</p><p>本教程记录我如何用React搭建一个博客项目，因为我也是同步学习加实操，并且我会尽量写的细致一些（细致到html，css代码以及javascript代码的讲解，所以你甚至可以不会html，css和javascript），因此本系列教程完全适合没有任何前端基础的同学（因为我也是没有前端基础就直接动手去做实习的前端开发项目了，并且仍在学习中）。</p><p>本项目的最终效果就是你当前浏览的博客网站，之前是用现成的Hexo框架搭建的，没有什么技术含量，现在自己动手用React来重做这个博客。</p><h1 id="开发环境及工具"><a href="#开发环境及工具" class="headerlink" title="开发环境及工具"></a>开发环境及工具</h1><ul><li><p>windows 10 （大多数人应该都是windows系统，为了提高教程的广泛适用性特意虚拟机装了win系统）</p></li><li><p>Node.js 12.18.3</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1Ps4i-crIQEJRQa6WXNetpQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Ps4i-crIQEJRQa6WXNetpQ</a>  密码: 4ujg</p></blockquote></li><li><p>webstorm 2020.1.3 </p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1caEtfLdNS_WE7Jemru1s2w" target="_blank" rel="noopener">https://pan.baidu.com/s/1caEtfLdNS_WE7Jemru1s2w</a>  密码: 29mr</p><p>教育激活方式：<a href="https://blog.csdn.net/u014044032/article/details/89838936" target="_blank" rel="noopener">https://blog.csdn.net/u014044032/article/details/89838936</a></p></blockquote></li><li><p>git（不是必须的，但是建议安装）</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1hY8ogFPMBJ-iIUJ9a4ljsw" target="_blank" rel="noopener">https://pan.baidu.com/s/1hY8ogFPMBJ-iIUJ9a4ljsw</a>  密码: a8mq</p></blockquote></li></ul><h1 id="创建博客项目"><a href="#创建博客项目" class="headerlink" title="创建博客项目"></a>创建博客项目</h1><p>打开webstorm，点击<code>Create New Project</code>，按如下步骤创建项目</p><p><img src="imgs/A01-1.png" alt="1"></p><p>项目创建结束之后，点击右上角绿色启动按钮，在浏览器中打开<code>http://localhost:3000/</code>，看到下面的内容就说明创建成功了。</p><p><img src="imgs/A01-2.png" alt="1"></p><p>至此，项目的前期准备工作就完成了。</p><p>Happy hacking…</p>]]></content>
      
      
      <categories>
          
          <category> A-React博客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="/261182303.html"/>
      <url>/261182303.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>直白点讲，事务就是一个操作序列，这些操作要么都执行，要不都不执行，它是一个不可分割的工作单位。</p><h3 id="基本特性（ACID）"><a href="#基本特性（ACID）" class="headerlink" title="基本特性（ACID）"></a>基本特性（ACID）</h3><ul><li>原子性(Atomicity)</li></ul><blockquote><p>一个事务必须被视为一个不可分割的最小工作单位，如果事务中的所有操作都成功，则提交，否则执行回滚。</p></blockquote><ul><li>一致性(Consistency)</li></ul><blockquote><p>数据库总是从一个一致性状态转变到另一个一致性状态，也就是一个事务在提交前，数据库状态不会发生改变。</p></blockquote><ul><li>隔离型(Isolation)</li></ul><blockquote><p>一个事务在提交前对另一个事务不可见，也就是一个事务在提交前执行的数据库操作，不会改变在另一个事务中读到的数据。</p></blockquote><ul><li>持久性(Durability)</li></ul><blockquote><p>一旦事务提交，其所做的修改会永久保存到数据库。</p></blockquote><h3 id="事务的使用"><a href="#事务的使用" class="headerlink" title="事务的使用"></a>事务的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line">beginl; # 也可以用 start transaction</span><br><span class="line"></span><br><span class="line"># 这里写要执行的sql语句</span><br><span class="line"></span><br><span class="line">commit; # 提交sql语句所做出的修改，如果要放弃数据变更就用 rollback;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建kubernetes学习环境03</title>
      <link href="/3912282315.html"/>
      <url>/3912282315.html</url>
      
        <content type="html"><![CDATA[<p>前两篇文章讲过了Mac和ubuntu的kubectl和minikube的安装，以及启动一个集群并在浏览器中能打开dashboard，本篇接着往下学习。本次学习kubernetes的最终目的是实现双栈访问，我也是啥也不懂，一步步摸索吧，在这个进度已经卡了两天了，踩了很多坑。一开始打算直接在Mac上跑，问题相对还好，不算多，大多数是网络连接的问题，随着学习的深入，要用到的有的插件不支持mac，无奈就用虚拟机Linux跑了，各种问题，一言难尽，墙的问题就不说了，虚拟机最大的问题在于不能用vm-driver，有的组件运行不了，我也不知道为什么，尝试了很多办法都搞不定，然后又尝试在云主机上跑，先试在用来做梯子的vultr主机上搭环境，遇到的第一个问题就是配置不够，我的主机是单核的，minikube要求最低双核，难受。然后又薅了阿里云一个月免费使用的羊毛，配置是够了，但是kubectl安装好了之后，用的时候提示找不到命令，原因是没有环境变量，于是又手动把kubectl加到环境变量，还是没用。这两天一直在MacOS，Linux虚拟机，云主机之间来回尝试，这里并不是说我尝试的其他方案不行，只是因为我是新手，也不太懂，网上查到的也有成功的案例。万般无奈之下，拿出了自从换了Mac之后沦为游戏机的旧电脑，分盘，装了个ubuntu，遇到了显卡驱动冲突的问题，还好是以前的主力机，应对显卡驱动冲突问题也是有经验的，具体解决方案，后期有空的话在写篇博文吧。目前来看，除了墙的问题，暂时还是比较顺利的，老电脑又发挥了一把余热。下面进入正题吧。</p><h3 id="与集群交互"><a href="#与集群交互" class="headerlink" title="与集群交互"></a>与集群交互</h3><p>使用名为 <code>echoserver</code> 的镜像创建一个 Kubernetes Deployment，并使用 <code>--port</code> 在端口 8080 上暴露服务。<code>echoserver</code> 是一个简单的 HTTP 服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10 # 这是官网给的镜像源，可能不可用，如果不可用，就用下面的镜像源</span><br><span class="line">kubectl create deployment hello-minikube --image=mirrorgooglecontainers/echoserver:1.10 # 拉取也有可能失败，目前没有比较好的解决办法，但是我睡一觉起来发现镜像拉下来了，可能睡觉也是一种解决方案...</span><br></pre></td></tr></table></figure><p>将其作为 Service 公开：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment hello-minikube --type=NodePort --port=8080</span><br></pre></td></tr></table></figure><p>现在 <code>hello-minikube</code> Pod 已经启动，但是必须等到 Pod 启动完全才能通过暴露的 Service 访问它,检查 Pod 是否启动并运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br><span class="line"><span class="meta">#</span><span class="bash"> 看到下面的输出就说明成功了，如果失败就需要删除service以及deployment，切换镜像源，重复以上步骤</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除service：kubectl delete services hello-minikube</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除deployment：kubectl delete deployment hello-minikube</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-minikube-6c684d8b47-rl7fj   1/1     Running   0          170m</span><br></pre></td></tr></table></figure><p>获取暴露 Service 的 URL 以查看 Service 的详细信息，把下面输出的url在浏览器打开就能看到了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube service hello-minikube --url</span><br></pre></td></tr></table></figure><p>这个pod先不要删除，后面配置双栈访问可能需要，如果没用到时候再删也不迟。</p><h3 id="Pod寻址"><a href="#Pod寻址" class="headerlink" title="Pod寻址"></a>Pod寻址</h3><p>下面的命令是用来查看Pod寻址的，由于没有配置ipv6访问，所以输出只有ipv4地址，Pod的名称换成自己的Pod名称就可以了，就是<code>kubectl get pod</code>输出的Pod名称：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods test-pod-6bcfcc5965-89kxf -o go-template --template='&#123;&#123;range .status.podIPs&#125;&#125;&#123;&#123;printf "%s \n" .ip&#125;&#125;&#123;&#123;end&#125;&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是输出信息</span></span><br><span class="line">172.17.0.2</span><br></pre></td></tr></table></figure><h3 id="安装calico"><a href="#安装calico" class="headerlink" title="安装calico"></a>安装calico</h3><p>配置双栈访问的必须有支持双栈协议的网络插件，官网给了两个：kubenet和calico，前面一个没找到怎么装，就选择了后者。</p><p>Calico官网提供了两个版本，一个适用于50个节点以下，一个用于50个节点以上，我们没有那么高的需求，就装第一个了，下面是安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://docs.projectcalico.org/manifests/calico.yaml -O # 下载</span><br><span class="line">kubectl apply -f calico.yaml # 安装</span><br></pre></td></tr></table></figure><p>安装也有一个镜像拉取的过程，可能也会失败，多试几次吧，因为墙的存在没有什么比较好的解决办法，用<code>kubectl get pods --all-namespaces</code>命令，如果calico开头的两个pod的状态为running就说明安装好了。</p><p>今天就到此结束吧，做事情倒是不累，有问题解决不掉，反复尝试各种方案是真的累。</p><p>to be continue……</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建kubernetes学习环境02--ubuntu篇</title>
      <link href="/3142631293.html"/>
      <url>/3142631293.html</url>
      
        <content type="html"><![CDATA[<h3 id="0-查看本机是否支持虚拟化"><a href="#0-查看本机是否支持虚拟化" class="headerlink" title="0. 查看本机是否支持虚拟化"></a>0. 查看本机是否支持虚拟化</h3><p>如下命令有输出即代表支持，个别电脑默认关闭了CPU虚拟化，需要到BIOS中去打开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E --color 'vmx|svm' /proc/cpuinfo    #Linux</span><br></pre></td></tr></table></figure><p>由于本机Linux环境为虚拟机安装，在虚拟机安装的系统中不支持再次虚拟化，不过没关系，后面会说解决方案。</p><h3 id="1-安装并配置kubectl"><a href="#1-安装并配置kubectl" class="headerlink" title="1. 安装并配置kubectl"></a>1. 安装并配置kubectl</h3><p>在 Kubernetes 上使用 Kubernetes 命令行工具 kubectl 部署和管理应用程序。使用 kubectl，可以检查集群资源；创建、删除和更新组件；查看新集群；并启动实例应用程序。</p><p>安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install kubectl --classic</span><br></pre></td></tr></table></figure><p>官网在这个步骤之后还有一个配置kubectl，其实无需配置，后面会讲到，因此如果按照官网指示用检查kubectl配置命令报错，也暂时不用管。</p><h3 id="2-安装Minikube"><a href="#2-安装Minikube" class="headerlink" title="2. 安装Minikube"></a>2. 安装Minikube</h3><p>Minikube 是一种可以在本地轻松运行 Kubernetes 的工具。Minikube 在笔记本电脑上的虚拟机（VM）中运行单节点 Kubernetes 集群，供那些希望尝试 Kubernetes 或进行日常开发的用户使用。</p><p>安装命令，可能会出现网络连接问题，多试几次就好了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 &amp;&amp; chmod +x minikube</span><br><span class="line">sudo mkdir -p /usr/local/bin/</span><br><span class="line">sudo install minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><p>由于本次环境搭建在ubuntu虚拟机中进行，因此我们用不了虚拟化，就不用加载vm-driver了（注意使用sudo，否则权限不够，如果加载了vm-driver就不需要sudo），直接让kubernetes组件运行在这台ubuntu虚拟机就行了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo minikube start --vm-driver=none --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure><p>但是上面的命令会输出报错信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sorry, Kubernetes 1.18.3 requires conntrack to be installed in root's path</span><br></pre></td></tr></table></figure><p>安装<code>conntract</code>就行了，之后再重新执行上面的命令启动minikube就不会报错了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install conntrack</span><br></pre></td></tr></table></figure><p>查看集群状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo minikube status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出如下， 表明启动成功</span></span><br><span class="line">minikube</span><br><span class="line">type: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br></pre></td></tr></table></figure><p>这时候再去运行检查kubectl配置命令，就会返回url响应，并且在用户目录下自动生成了.kube目录</p><p>用下面的命令开启proxy，让dashboard可以被宿主机器访问：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'</span><br></pre></td></tr></table></figure><p>dashboard打开只有如下信息，意思大概就是服务不可用了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"Status"</span>,</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"Failure"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"no endpoints available for service \"http:kubernetes-dashboard:\""</span>,</span><br><span class="line">  <span class="attr">"reason"</span>: <span class="string">"ServiceUnavailable"</span>,</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">503</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>23:25</code>原因：暂时还不清楚，可能和虚拟机只能用none有关，多次尝试无果后，两次执行 <code>sudo minikube delete</code>清理集群后重建，再次重复上述步骤后终于在下面的地址看到了dashboard。</p><blockquote><p><a href="http://172.16.160.132:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/#/overview?namespace=default" target="_blank" rel="noopener">http://172.16.160.132:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/#/overview?namespace=default</a></p></blockquote><p>其中前面的IP地址根据自己的虚拟机网络地址更改，也可以通过<code>sudo minikube ip</code>或者<code>ifconfig</code>获取。</p><p>To be continue……</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建kubernetes学习环境01--Mac OS篇</title>
      <link href="/121557479.html"/>
      <url>/121557479.html</url>
      
        <content type="html"><![CDATA[<h3 id="0-查看本机是否支持虚拟化"><a href="#0-查看本机是否支持虚拟化" class="headerlink" title="0. 查看本机是否支持虚拟化"></a>0. 查看本机是否支持虚拟化</h3><p>如下命令有输出即代表支持，个别电脑默认关闭了CPU虚拟化，需要到BIOS中去打开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -E --color 'vmx|svm' /proc/cpuinfo    #Linux</span><br><span class="line">sysctl -a | grep -E --color 'machdep.cpu.features|VMX'    #Mac</span><br></pre></td></tr></table></figure><p>由于本机Linux环境为虚拟机安装，在虚拟机安装的系统中不支持再次虚拟化，因此搭建环境调整为实体机Mac OS环境，系统版本为10.15.6。</p><h3 id="1-安装并配置kubectl"><a href="#1-安装并配置kubectl" class="headerlink" title="1. 安装并配置kubectl"></a>1. 安装并配置kubectl</h3><p>在 Kubernetes 上使用 Kubernetes 命令行工具 kubectl 部署和管理应用程序。使用 kubectl，可以检查集群资源；创建、删除和更新组件；查看新集群；并启动实例应用程序。</p><p>安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubernetes-cli</span><br></pre></td></tr></table></figure><p><b>此处有坑:</b> brew update没有反应，原因是brew默认使用国外镜像源，替换成科大镜像源即可，之前做过同样尝试未果，没在继续研究，今天一并解决了，之前同样做法没有成功的原因是没有到处环境变量，导致镜像切换后未生效，以下是解决方案：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/core)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/cask)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"><span class="comment"># bash和zsh导出环境变量略有不同，我是zsh，具体操作如下</span></span><br><span class="line"><span class="comment"># bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/'</span> ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># zsh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/'</span>  ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>解决brew问题之后，就可以顺利安装kubectl，官网在这个步骤之后还有一个配置kubectl，其实无需配置，后面会讲到，因此如果按照官网指示用检查kubectl配置命令报错，也暂时不用管。</p><h3 id="2-安装Minikube"><a href="#2-安装Minikube" class="headerlink" title="2. 安装Minikube"></a>2. 安装Minikube</h3><p>Minikube 是一种可以在本地轻松运行 Kubernetes 的工具。Minikube 在笔记本电脑上的虚拟机（VM）中运行单节点 Kubernetes 集群，供那些希望尝试 Kubernetes 或进行日常开发的用户使用。</p><p>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install minikube</span><br></pre></td></tr></table></figure><p>确认 hypervisor 和 Minikube 均已成功安装，由于本机已安装vmware fusion，因此本次的hypervisior驱动我用的是vmwarefusion，但是<b>此处也有坑</b>，启动本地集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --vm-driver=vmwarefusion</span><br></pre></td></tr></table></figure><p>输出报错信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed to start node: startup failed: Failed to setup kubeconfig: HostIP not yet implemented for "vmwarefusion" driver</span><br></pre></td></tr></table></figure><p>百度无果，google给出了错误原因：vmwarefusion已经弃用，现在用的是vmware</p><p>找到错误原因就好办了，安装vmware驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docker-machine-driver-vmware</span><br></pre></td></tr></table></figure><p>现在用vmware重新启动本地集群，在这之前先清理刚才启动失败的集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minikube delete</span><br><span class="line">minikube start --vm-driver=vmware</span><br></pre></td></tr></table></figure><p>启动顺利，没有报错，查看集群状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">minikube status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出如下， 表明启动成功</span></span><br><span class="line">minikube</span><br><span class="line">type: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br></pre></td></tr></table></figure><p>这时候再去运行检查kubectl配置命令，就会返回url响应，并且在用户目录下自动生成了.kube目录</p><p>运行<code>minikube dashboard</code>可以在浏览器中打开dashboard</p><p>To be continue……</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始做一个无界面的2048</title>
      <link href="/230921126.html"/>
      <url>/230921126.html</url>
      
        <content type="html"><![CDATA[<h1 id="初始化随机矩阵"><a href="#初始化随机矩阵" class="headerlink" title="初始化随机矩阵"></a>初始化随机矩阵</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个4*4的矩阵，并在随机的两个位置随机生成2或4</span></span><br><span class="line">matrix = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    atrix.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        matrix[i].append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    x = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    y = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    matrix[x][y] = random.choice([<span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> matrix:</span><br><span class="line">    print(<span class="string">' '</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> m]))</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h1 id="按移动方向将所有非0数排到前面"><a href="#按移动方向将所有非0数排到前面" class="headerlink" title="按移动方向将所有非0数排到前面"></a>按移动方向将所有非0数排到前面</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check0</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="comment"># 按移动方向将所有非0数排到前面</span></span><br><span class="line">    flag1 = <span class="number">1</span> </span><br><span class="line">    <span class="keyword">while</span> flag1 == <span class="number">1</span>:</span><br><span class="line">        flag1 = <span class="number">0</span></span><br><span class="line">        flag2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">            <span class="keyword">if</span> flag2 == <span class="number">1</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">                flag1 = <span class="number">1</span>  <span class="comment"># 0后面出现非0数</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                flag2 = <span class="number">1</span>  <span class="comment"># 出现0</span></span><br><span class="line">        <span class="keyword">if</span> flag1 == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> l[i] == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 非0数前移</span></span><br><span class="line">                    l[i] = l[i + <span class="number">1</span>]</span><br><span class="line">                    l[i + <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure><blockquote><p>输入输出示例：</p><p>输入：[0,0,2,2]</p><p>输出：[2,2,0,0]</p></blockquote><h1 id="定义移动规则"><a href="#定义移动规则" class="headerlink" title="定义移动规则"></a>定义移动规则</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(l)</span>:</span></span><br><span class="line">    l = check0(l)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> l[i] == l[i + <span class="number">1</span>]:</span><br><span class="line">            l[i] *= <span class="number">2</span></span><br><span class="line">            l[i + <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> check0(l)</span><br></pre></td></tr></table></figure><blockquote><p>输入输出示例：</p><p>输入：[0,0,2,2]</p><p>输出：[4,0,0,0]</p></blockquote><h1 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h1><p>简化了移动的操作逻辑，比如上移操作就是将矩阵转置后左移，再把矩阵转置回来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertMatrix</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        res.append([])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            res[i].append(matrix[j][i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="实现上下左右移动"><a href="#实现上下左右移动" class="headerlink" title="实现上下左右移动"></a>实现上下左右移动</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveLeft</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        matrix[i] = move(matrix[i])</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveRight</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="comment"># move()函数默认是将列表左移，所以将列表反转后左移，再反转也就是右移</span></span><br><span class="line">        matrix[i].reverse()</span><br><span class="line">        matrix[i] = move(matrix[i])</span><br><span class="line">        matrix[i].reverse()</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveUp</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> convertMatrix(moveLeft(convertMatrix(matrix)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveDown</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> convertMatrix(moveRight(convertMatrix(matrix)))</span><br></pre></td></tr></table></figure><h1 id="移动结束后在随机位置添加随机新数字"><a href="#移动结束后在随机位置添加随机新数字" class="headerlink" title="移动结束后在随机位置添加随机新数字"></a>移动结束后在随机位置添加随机新数字</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddNewNum</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    new_num = random.choice([<span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line">    positions = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] == <span class="number">0</span>:</span><br><span class="line">                positions.append([i, j])</span><br><span class="line">    <span class="keyword">if</span> len(positions) &gt; <span class="number">0</span>:</span><br><span class="line">        position = random.choice(positions)</span><br><span class="line">        matrix[position[<span class="number">0</span>]][position[<span class="number">1</span>]] = new_num</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br></pre></td></tr></table></figure><p>到这里，我们就完成了游戏的主要逻辑代码</p><h1 id="创建游戏的类"><a href="#创建游戏的类" class="headerlink" title="创建游戏的类"></a>创建游戏的类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game2048</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = []</span><br><span class="line">        self.__mcopy = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCanves</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="comment"># 初始化4*4的矩阵</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            self.__matrix.append([])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                self.__matrix[i].append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            x = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">            y = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">            self.__matrix[x][y] = random.choice([<span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.__matrix:</span><br><span class="line">            print(<span class="string">' '</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> m]))</span><br><span class="line">        print()</span><br><span class="line">        self.__mcopy = copy.deepcopy(self.__matrix)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Up</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = moveLogic.moveUp(self.__matrix)</span><br><span class="line">        self.UpDateCanves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Down</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = moveLogic.moveDown(self.__matrix)</span><br><span class="line">        self.UpDateCanves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Left</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = moveLogic.moveLeft(self.__matrix)</span><br><span class="line">        self.UpDateCanves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Right</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = moveLogic.moveRight(self.__matrix)</span><br><span class="line">        self.UpDateCanves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">UpDateCanves</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="comment"># 移动后输出新矩阵</span></span><br><span class="line">        <span class="keyword">if</span> self.__mcopy != self.__matrix:</span><br><span class="line">            self.__matrix = moveLogic.AddNewNum(self.__matrix)</span><br><span class="line">            self.__mcopy = copy.deepcopy(self.__matrix)</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.__matrix:</span><br><span class="line">            print(<span class="string">' '</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> m]))</span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GameOver</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="comment"># 如果上下左右都不能移动，那么游戏结束</span></span><br><span class="line">        tempMatrix = copy.deepcopy(self.__matrix)</span><br><span class="line">        <span class="keyword">if</span> tempMatrix == moveLogic.moveRight(tempMatrix):</span><br><span class="line">            <span class="keyword">if</span> tempMatrix == moveLogic.moveLeft(tempMatrix):</span><br><span class="line">                <span class="keyword">if</span> tempMatrix == moveLogic.moveUp(tempMatrix):</span><br><span class="line">                    <span class="keyword">if</span> tempMatrix == moveLogic.moveDown(tempMatrix):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="让游戏运行起来"><a href="#让游戏运行起来" class="headerlink" title="让游戏运行起来"></a>让游戏运行起来</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">game = Game2048()</span><br><span class="line">game.setCanves()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> game.GameOver():</span><br><span class="line">    op = input(<span class="string">"输入移动方向（W上A左S下D右）："</span>)</span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">"W"</span>:</span><br><span class="line">        game.Up()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">"A"</span>:</span><br><span class="line">        game.Left()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">"S"</span>:</span><br><span class="line">        game.Down()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">"D"</span>:</span><br><span class="line">        game.Right()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"移动方向输入错误！"</span>)</span><br><span class="line">print(<span class="string">"游戏结束"</span>)</span><br></pre></td></tr></table></figure><p>到这里一个完整的无界面2048小游戏就完成了，本文的任务完成，后面有时间再做图形界面</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的vector用法全解</title>
      <link href="/402551672.html"/>
      <url>/402551672.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是vector"><a href="#一、什么是vector" class="headerlink" title="一、什么是vector"></a>一、什么是vector</h1><p>vector是C++的模版类，它是一种动态数组，可以在动态的插入，删除，追加元素，使用vector必须包含头文件vector，同时vector包含在名称空间std中，因此使用它还必须使用using编译指令或者std::vector。</p><h1 id="二、vector的创建"><a href="#二、vector的创建" class="headerlink" title="二、vector的创建"></a>二、vector的创建</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1; <span class="comment">//声明一个int型vector变量</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2(<span class="number">5</span>); <span class="comment">//声明一个int型vector变量，且长度为5</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//声明的同时初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、vector的函数用法"><a href="#三、vector的函数用法" class="headerlink" title="三、vector的函数用法"></a>三、vector的函数用法</h1><h2 id="push-back"><a href="#push-back" class="headerlink" title="push_back()"></a>push_back()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.push_back(<span class="number">1</span>); <span class="comment">//在v的最后增加元素1</span></span><br></pre></td></tr></table></figure><h2 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v1.insert(v1.begin(), <span class="number">2</span>); <span class="comment">//在v1的第一个元素前面插入2</span></span><br><span class="line">v1.insert(v1.begin(), <span class="number">10</span>, <span class="number">1</span>); <span class="comment">//在v1的第一个元素前面插入10个1</span></span><br><span class="line">v1.insert(v1.begin(), v2.begin(), v2.end()); <span class="comment">//在v1的第一个元素前面插入v2</span></span><br></pre></td></tr></table></figure><h2 id="erase"><a href="#erase" class="headerlink" title="erase()"></a>erase()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1.erase(v1.begin()+<span class="number">1</span>); <span class="comment">//删除第二个元素</span></span><br><span class="line">v1.erase(v1.begin(), v1.begin()+<span class="number">2</span>); <span class="comment">//删除[0,2)的元素</span></span><br></pre></td></tr></table></figure><h2 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back()"></a>pop_back()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.pop_back(); <span class="comment">//删除最后一个元素</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.clear(); <span class="comment">//清空v1</span></span><br></pre></td></tr></table></figure><h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.at(<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1的第二个元素</span></span><br></pre></td></tr></table></figure><h2 id="front"><a href="#front" class="headerlink" title="front()"></a>front()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.front()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1首元素</span></span><br></pre></td></tr></table></figure><h2 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.back()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1尾元素</span></span><br></pre></td></tr></table></figure><h2 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;*(v1.begin())&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//begin()返回指向首元素的指针，用*解除引用，输出首元素值</span></span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;*(v1.begin())&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//用法同上</span></span><br></pre></td></tr></table></figure><h2 id="rbegin"><a href="#rbegin" class="headerlink" title="rbegin()"></a>rbegin()</h2><p>与end()相同</p><h2 id="rend"><a href="#rend" class="headerlink" title="rend()"></a>rend()</h2><p>与begin()相同</p><h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.empty(); <span class="comment">//判断vector是否为空</span></span><br></pre></td></tr></table></figure><h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = v1.size(); <span class="comment">//返回元素个数</span></span><br></pre></td></tr></table></figure><h2 id="capacity"><a href="#capacity" class="headerlink" title="capacity()"></a>capacity()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.capacity(); <span class="comment">//获取v1定义的容量</span></span><br></pre></td></tr></table></figure><h2 id="max-size"><a href="#max-size" class="headerlink" title="max_size()"></a>max_size()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.max_size(); <span class="comment">//返回vector的最大可容纳元素数量</span></span><br></pre></td></tr></table></figure><h2 id="swap"><a href="#swap" class="headerlink" title="swap()"></a>swap()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.swap(v2); <span class="comment">//交换v1和v2</span></span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(v1.begin(), v1.end()); <span class="comment">//从小到大排序</span></span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(v1.begin(), v1.end()); <span class="comment">//从大到小排序</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++多态的一点理解</title>
      <link href="/1722786178.html"/>
      <url>/1722786178.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、-什么是C-的多态"><a href="#一、-什么是C-的多态" class="headerlink" title="一、 什么是C++的多态"></a>一、 什么是C++的多态</h1><p>多态顾名思义就是一种调用语句会出现不同的表现形态，多态的出现与类的继承有关，下面来看一个例子吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在下面的例子中A是父类,B是A的一个子类,并且A和B中都有一个fun函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">example</span><span class="params">(A &amp;a)</span></span>&#123;</span><br><span class="line">  a.fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a;</span><br><span class="line">  B b;</span><br><span class="line">  example(a);<span class="comment">//正常接受的是A类的一个对象，没有发生多态，所以调用的还是A类中的fun函数</span></span><br><span class="line">  example(b);<span class="comment">//接受的是A类子类的对象，可能发生多态，也可能不发生多态，具体什么时候发生下面再讲，</span></span><br><span class="line">  <span class="comment">//如果有多态发生，那么这里调用的就是B类的fun函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、多态实现的条件"><a href="#二、多态实现的条件" class="headerlink" title="二、多态实现的条件"></a>二、多态实现的条件</h1><ul><li>要有继承</li><li>虚函数重写</li><li>父类指针或引用指向子类对象</li></ul><p>看下面结合代码的讲解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//virtual关键字表明这是一个虚函数</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"父类"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A&#123;<span class="comment">//此处发生了继承</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//虚函数重写</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"子类"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(A *a)</span></span>&#123;<span class="comment">//传入一个父类指针</span></span><br><span class="line">    a-&gt;print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    test(&amp;a);<span class="comment">//父类指针指向父类对象，未发生多态，输出为"父类"</span></span><br><span class="line">    test(&amp;b);<span class="comment">//父类指针指向了子类对象，多态发生，输出为"子类"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、-多态在C-编译器内部是如何实现的"><a href="#三、-多态在C-编译器内部是如何实现的" class="headerlink" title="三、 多态在C++编译器内部是如何实现的"></a>三、 多态在C++编译器内部是如何实现的</h1><p>当类中声明虚函数时，编译器会在类中生成一个虚函数表，虚函数表是一个存储类成员函数指针的数据结构，由编译器自动生成与维护的，virtual成员函数会被编译器放入虚函数表中，存在虚函数时，每个对象中都有一个指向虚函数表的指针(vptr)。</p><p>通过虚函数表指针VPTR调用重写函数是在程序运行时进行的，因此需要通过寻址操作才能确定真正应该调用的函数，所以多态发生时C++编译器不需要区分是子类对象还是父类对象。而普通成员函数是在编译时就确定了调用的函数。因此出于效率考虑，没有必要将所有成员函数都声明为虚函数  </p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法题：无重复字符的最长子串</title>
      <link href="/3522518838.html"/>
      <url>/3522518838.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。</p><p>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这个题可以用滑动窗口来解决，首先定义窗口的起点和终点，所求最长子串的长度就是终点和起点的差值。</p><p>从第一个字符开始扫描，扫描前窗口的起点和终点都是0，扫描结束后起点为0，终点为1，所以第一次扫描所求的结果为1；然后开始下一次的扫描，如果终点字符没有出现在起点字符到终点字符前的字符之间，那么起点依然不变，终点向后滑动一个单位，否则将起点向后滑动至前面出现的最近的与终点字符相同的字符的下一个单位，以此类推，下面是代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; Mmap; <span class="comment">//用于保存s中字符的最新索引，用哈希表查找更快</span></span><br><span class="line">    <span class="keyword">int</span> sSize = s.size(); <span class="comment">//求s的长度</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, len = <span class="number">0</span>, max = <span class="number">0</span>; <span class="comment">//窗口起点，终点，长度，最大无重复子串长度</span></span><br><span class="line">    <span class="keyword">char</span> temp; <span class="comment">//临时存储字符</span></span><br><span class="line">    <span class="keyword">while</span>(end&lt;sSize)&#123;</span><br><span class="line">        temp = s[end]; </span><br><span class="line">        <span class="keyword">if</span>(Mmap.find(temp)!=Mmap.end() &amp;&amp; Mmap[temp]&gt;=start)&#123;</span><br><span class="line">            <span class="comment">//出现重复字符，改变起点位置</span></span><br><span class="line">            start = Mmap[temp] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Mmap[temp] = end; </span><br><span class="line">        end++;</span><br><span class="line">        len = end - start;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;len)&#123;</span><br><span class="line">            max = len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++自定义实现MyString类的封装（二）</title>
      <link href="/1887828332.html"/>
      <url>/1887828332.html</url>
      
        <content type="html"><![CDATA[<h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>在上一篇文章里我们实现了MyString类的构造和析构函数，所讲解的内容包含类的声明和实现分离、构造和析构函数的语法、const限定符的部分使用场景、引用的部分使用场景、this指针、函数重载这几个内容。</p><p>本文要讲解的主要内容是操作符重载，实际上操作符重载可以被认为是函数重载的一种特殊情况。讲解内容以MyString类为例，注释形式为主，今天我们继续扩展MyString类的功能。</p><h1 id="MyString类功能增强"><a href="#MyString类功能增强" class="headerlink" title="MyString类功能增强"></a>MyString类功能增强</h1><p>与前文相同，从功能的调用方式入手。</p><h2 id="cout-lt-lt-s"><a href="#cout-lt-lt-s" class="headerlink" title="cout &lt;&lt; s;"></a>cout &lt;&lt; s;</h2><p>对象被创建以后，用户需要看到对象中的内容，所以我们就需要实现将s输出到屏幕上，看代码：</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s);</span><br><span class="line"><span class="comment">// 首先cout是一个输出流，他是一个ostream对象，所以接受的函数参数是一个ostream类型加一个MyString类型</span></span><br><span class="line"><span class="comment">// 其次如果你希望&lt;&lt;操作符支持链式编程，也就是可以这样调用:cout&lt;&lt;s&lt;&lt;"abc"&lt;&lt;endl,</span></span><br><span class="line"><span class="comment">// 那么你的返回类型也掩饰一个ostream对象</span></span><br><span class="line"><span class="comment">// 最后ostream类的源码，我们是不可见的，所以我们不能通过成员函数来实现操作符重载，</span></span><br><span class="line"><span class="comment">// 所以这里只能使用友元函数来实现，这也是友元函数的最大用武之地</span></span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现非常简单，只要把s的值传递给ostream对象，然后返回就可以了</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cin-gt-gt-s"><a href="#cin-gt-gt-s" class="headerlink" title="cin &gt;&gt; s;"></a>cin &gt;&gt; s;</h2><p>从键盘键入内容传递给对象也是一个基本的业务，实现方式和cout类似，因此不做过多说明了</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s);</span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="s-i"><a href="#s-i" class="headerlink" title="s[i];"></a>s[i];</h2><p>根据索引获取对象的值，需要对[]操作符进行重载</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// 返回的值一个字符，所以函数的返回类型为char，索引是int型，同时不希望对象被改变，所以用const</span></span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ch[i]; <span class="comment">//直接返回ch的索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="s-“abc”-s1-s2"><a href="#s-“abc”-s1-s2" class="headerlink" title="s == “abc”; s1 == s2;"></a>s == “abc”; s1 == s2;</h2><p>判断是否相等有两种情况，一是判断一个对象是否和一个字符串相等，一是判断两个对象是否相等</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//都是一些比较简单的业务逻辑</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>*p) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">      <span class="comment">//strcmp(s1,s2)   s1=s2返回0，s1&gt;s2返回大于0的值，s1&lt;s2返回小于0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整施工"><a href="#完整施工" class="headerlink" title="完整施工"></a>完整施工</h1><p>接下来还有一部分操作符重载，远离都类似就不再展开细讲了，下面给出封装完成的MyString类：</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*实现自定义字符串类*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//私有成员变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Length;</span><br><span class="line">    <span class="keyword">char</span> * ch;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//构造和析构</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyString(<span class="keyword">int</span> length = <span class="number">0</span>);<span class="comment">//对象内存空间分配构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p);<span class="comment">//对象初始化构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> MyString &amp;obj);<span class="comment">//拷贝构造函数  </span></span><br><span class="line">    ~MyString();<span class="comment">//析构函数  </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//返回长度   </span></span><br><span class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;<span class="comment">//[]操作符   </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;  <span class="comment">//==操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;<span class="comment">// !=操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(MyString &amp; s);<span class="comment">// &gt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(MyString &amp; s);<span class="comment">// &lt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *p); <span class="comment">//=操作符 字符串赋值 </span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s); <span class="comment">//=操作符 用一个对象给另一个对象赋值 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s); <span class="comment">// &lt;&lt;操作符  </span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s); <span class="comment">//  &gt;&gt;操作符  </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line">MyString::MyString(<span class="keyword">int</span> length) &#123;</span><br><span class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp;obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = obj.Length;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~MyString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"对象"&lt;&lt;this&lt;&lt;"析构完成"&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"><span class="keyword">int</span> MyString::length() &#123;</span><br><span class="line">    <span class="keyword">return</span> Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * MyString::c_str()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * MyString::c_str() <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []操作符重载</span></span><br><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i)  <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s == "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">        <span class="comment">//strcmp(s1,s2)相等返回为0，s1 若大于s2 则返回大于0 的值。s1 若小于s2 则返回小于0 的值。</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s1 == s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// !=操作符重载 调用方式：s1 != "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 调用方式：s1 != s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = "abc"</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = s2</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = s.Length ;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载==============================================</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 操作符重载 </tag>
            
            <tag> 友元函数 </tag>
            
            <tag> 对象的构造和析构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++自定义实现MyString类的封装(一)</title>
      <link href="/764912066.html"/>
      <url>/764912066.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文通过封装一个自定义的字符串类MyString来讲解C++面向对象的一些基础内容，主要涉及以下几个方面，知识讲解以代码注释为主，这样更容易理解：</p><ul><li>函数重载</li><li>类的构造和析构</li><li>const操作符</li><li>引用</li><li>操作符重载</li></ul><h1 id="一、-搭建类的框架"><a href="#一、-搭建类的框架" class="headerlink" title="一、 搭建类的框架"></a>一、 搭建类的框架</h1><p>我采用类的声明和类的实现分离的做法，因此这个类会有两个文件，其中MyString.hpp是类的声明，这里定义了类的成员变量和类的成员函数。</p><h2 id="MyString-hpp"><a href="#MyString-hpp" class="headerlink" title="MyString.hpp"></a>MyString.hpp</h2><p>我使用的编译器是Xcode，其他编译器的后缀名是.h，关于.hpp和.h不是本文的重点，不作说明，感兴趣的可以自行查找相关文献。</p><p>以下代码为新建一个类时，编译器自动生成代码，没有什么难点，因此只做部分注释。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once <span class="comment">// 防止头文件被重复引用，多次引用只有一次有效</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure><h2 id="MyString-cpp"><a href="#MyString-cpp" class="headerlink" title="MyString.cpp"></a>MyString.cpp</h2><p>同样由编译器自动生成，不过也可以手动创建，以下为编译器自动生成代码，只有一行，因为还没有做类的成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br></pre></td></tr></table></figure><h1 id="二、-MyString要实现的基础业务需求"><a href="#二、-MyString要实现的基础业务需求" class="headerlink" title="二、 MyString要实现的基础业务需求"></a>二、 MyString要实现的基础业务需求</h1><p>在实现功能之前先确定类的成员变量，之后实现功能我用调用方式来说明。</p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>一个字符串首先必须有一个长度，其次就是字符串的内容，因此有了如下的变量声明，同时我们不希望类的内部实现被外界看到，也就是说，我们不希望用户直接对成员变量进行操作，因此这里定义成私有变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> Length;</span><br><span class="line"><span class="keyword">char</span> * ch;</span><br></pre></td></tr></table></figure><h2 id="MyString-s"><a href="#MyString-s" class="headerlink" title="MyString s;"></a>MyString s;</h2><p>第一个应用场景就是声明一个变量，这里就需要开始对象的构造了，因此我们需要在MyString.hpp中定义构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyString(); <span class="comment">//在之前的文章里简单的讲解过构造函数和析构函数的语法：函数名和类名相同</span></span><br></pre></td></tr></table></figure><p>然后在MyString.cpp文件中实现该函数的业务逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyString::MyString()<span class="comment">//类的声明和实现分离语法   类名::函数名()&#123;函数体&#125;</span></span><br><span class="line">&#123;</span><br><span class="line">Length = <span class="number">0</span>; <span class="comment">//声明时没有赋值，因此字符串的长度应该是0</span></span><br><span class="line">  ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; <span class="comment">//分配内存，多分配一个长度，留给"/0"</span></span><br><span class="line">  <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); <span class="comment">//这时候的字符串是一个空串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyString-s-“abc”"><a href="#MyString-s-“abc”" class="headerlink" title="MyString  s = “abc”;"></a>MyString  s = “abc”;</h2><p>第二个场景是声明的同时初始化一个变量，同样是对象的构造：</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p); <span class="comment">//1.我们只是用一下传入的参数，为了防止意外错误，我们不希望这个参数被改变，因此定义成const</span></span><br><span class="line"><span class="comment">//2.同样是构造函数，因此函数名和类名相同，但是接受的参数不同，所以这里就是函数重载。要说明的是：函数重载的判断标准是函数的参数列表，并不是函数的返回类型</span></span><br></pre></td></tr></table></figure><blockquote><p>Mystring.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">  <span class="comment">//1. 传入的p可能是一个空值，如果是空值，那就和无参构造函数相同</span></span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    Length = <span class="number">0</span>; </span><br><span class="line">    ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; </span><br><span class="line">    <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p); <span class="comment">//获取传入字符串长度</span></span><br><span class="line">    ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(ch, p);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyString-s1-s2"><a href="#MyString-s1-s2" class="headerlink" title="MyString s1 = s2;"></a>MyString s1 = s2;</h2><p>第三个场景是用一个变量区初始化另一个变量，也是对象的构造，但这里是拷贝构造函数：</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> MyString &amp; obj); <span class="comment">//用一个对象初始化另一个对象，传入的参数应该是MyString对象，同时我们不需要对obj直接进行操作，也不希望obj在使用过程中被意外的改变，因此将obj定义为一个const引用，在用一个对象初始化另一个对象的时候，编译器就会自动调用拷贝构造函数</span></span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp; obj)&#123;</span><br><span class="line">  <span class="comment">//这里用到了this指针，也可以不用，this指针指明了当前被操作的对象，他也是函数的一个参数，只不过没有显式的定义出来，在c++编译器的内部已经帮我们定义好了</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Length = obj.Length; <span class="comment">//复制对象的长度</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>]; <span class="comment">//分配内存</span></span><br><span class="line">  <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch); <span class="comment">//复制对象的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象的析构"><a href="#对象的析构" class="headerlink" title="对象的析构"></a>对象的析构</h2><p>在类封装完成之前，我们还不完全知道哪些地方分配了内存，需要在对象销毁时释放内存空间，因此，对象的析构可以在类的封装结束后再实现，这里先打一个框架，不做实现</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~MyString();</span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyString::~MyString()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后说明: 构造函数和析构函数，我们规定采用public声明，因此上述函数的声明都是在public字段中的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 操作符重载 </tag>
            
            <tag> 友元函数 </tag>
            
            <tag> 对象的构造和析构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识C++对象的构造和析构</title>
      <link href="/561343915.html"/>
      <url>/561343915.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建一个对象时常常需要某些初始化工作，例如对成员变量的赋值等，但是类的成员变量不能在声明的时候赋值；同样的，在对象被销毁的时候也需要执行某些自动化操作，因此就有了对象的构造和析构函数。</p><h1 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>函数名和类相同的特殊成员函数，并且没有任何返回类型的声明。</p><h2 id="1-2-调用"><a href="#1-2-调用" class="headerlink" title="1.2 调用"></a>1.2 调用</h2><ul><li>编译器自动调用</li><li>手动调用</li></ul><h1 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2. 析构函数"></a>2. 析构函数</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>用于清理对象，没有返回类型声明，函数名为~ClassName()，在对象被销毁时自动调用。</p><h2 id="2-2-调用"><a href="#2-2-调用" class="headerlink" title="2.2 调用"></a>2.2 调用</h2><ul><li>编译器自动调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些近况</title>
      <link href="/3937384991.html"/>
      <url>/3937384991.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map/reduce/filter函数</title>
      <link href="/957718428.html"/>
      <url>/957718428.html</url>
      
        <content type="html"><![CDATA[<p>map/reduce/fliter 是python中较为常用的内建高阶函数（一个函数接收另一个函数作为参数，这种函数称之为高阶函数）</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="调用形式"><a href="#调用形式" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote><p>map(function,sequence)</p></blockquote><p>解析：sequence是一个序列，function是一个函数，map函数对sequence中的每一个元素依次将其传入并执行function函数，最终将结果作为一个list返回，python3中返回的是一个迭代器。</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">res = map(square, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res'</span>), res, list(res))</span><br><span class="line"><span class="comment"># python3中map返回的是一个迭代器，要转化为列表或者元祖才能看到想要的输出</span></span><br><span class="line">res2 = map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># map函数同样适用于lambda匿名函数</span></span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res2'</span>), res2, list(res2))</span><br><span class="line"><span class="comment"># 进阶应用</span></span><br><span class="line">funcs = [square, double]</span><br><span class="line">res3 = map(<span class="keyword">lambda</span> func: func(<span class="number">3</span>), funcs)</span><br><span class="line">print(list(res3))</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote><p>res &lt;map object at 0x7f5b949eb940&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>res2 &lt;map object at 0x7f5b949eba20&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>[9, 6]</p></blockquote><p><br><br></p><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><h3 id="调用形式-1"><a href="#调用形式-1" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote><p>reduce(functions,sequence)</p></blockquote><p>解析：先将sequence的前两个值传入function，function的返回值和sequence的下一个值作为function新的两个参数，以此迭代</p><h4 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># reduce函数包含在functools模块中</span></span><br><span class="line">res4 = reduce(<span class="keyword">lambda</span> x ,y : x +y ,[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res4:'</span>), res4)</span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><blockquote><p>res4: 4950</p></blockquote><p><br><br></p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><h3 id="调用形式-2"><a href="#调用形式-2" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote><p>filter(function,sequence)</p></blockquote><p>解析：将sequence中的元素依次传入function，将返回值为True的元素组成一个list/tuple/string（取决于sequence类型，python3返回迭代器）</p><h4 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res5 = filter(<span class="keyword">lambda</span> x: x % <span class="number">3</span> == <span class="number">0</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)])</span><br><span class="line">print(list(res5))</span><br></pre></td></tr></table></figure><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><blockquote><p>[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48]</p></blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><li>map/reduce/filter为函数式编程提供了很多便利，可以让代码更加简洁</li><li>map/reduce/filter在python2中返回的是基本数据类型，python3返回迭代器</li>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高阶函数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
