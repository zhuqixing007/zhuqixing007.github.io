<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++算法题：两数之和</title>
    <url>/2019/11/07/C-%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p>
</blockquote>
<h1 id="一、暴力求解"><a href="#一、暴力求解" class="headerlink" title="一、暴力求解"></a>一、暴力求解</h1><p>直接用嵌套循环遍历数组中所有元素，找到符合的两个元素，第二层循环从第一层循环的下一个元素开始遍历，所以这种方法的算法时间复杂度就是循环经历的次数：$O({(1+n)n\over2})$ ，空间复杂度：$ O(1) $。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> ans = target - nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans == nums[j])&#123;</span><br><span class="line">                    v.push_back(i);</span><br><span class="line">                    v.push_back(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="两遍哈希表"><a href="#两遍哈希表" class="headerlink" title="两遍哈希表"></a>两遍哈希表</h1><h1 id="一遍哈希表"><a href="#一遍哈希表" class="headerlink" title="一遍哈希表"></a>一遍哈希表</h1>]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++自定义实现MyString类的封装（二）</title>
    <url>/2019/10/30/C-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0MyString%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>在上一篇文章里我们实现了MyString类的构造和析构函数，所讲解的内容包含类的声明和实现分离、构造和析构函数的语法、const限定符的部分使用场景、引用的部分使用场景、this指针、函数重载这几个内容。</p>
<p>本文要讲解的主要内容是操作符重载，实际上操作符重载可以被认为是函数重载的一种特殊情况。讲解内容以MyString类为例，注释形式为主，今天我们继续扩展MyString类的功能。</p>
<h1 id="MyString类功能增强"><a href="#MyString类功能增强" class="headerlink" title="MyString类功能增强"></a>MyString类功能增强</h1><p>与前文相同，从功能的调用方式入手。</p>
<h2 id="cout-lt-lt-s"><a href="#cout-lt-lt-s" class="headerlink" title="cout &lt;&lt; s;"></a>cout &lt;&lt; s;</h2><p>对象被创建以后，用户需要看到对象中的内容，所以我们就需要实现将s输出到屏幕上，看代码：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s);</span><br><span class="line"><span class="comment">// 首先cout是一个输出流，他是一个ostream对象，所以接受的函数参数是一个ostream类型加一个MyString类型</span></span><br><span class="line"><span class="comment">// 其次如果你希望&lt;&lt;操作符支持链式编程，也就是可以这样调用:cout&lt;&lt;s&lt;&lt;"abc"&lt;&lt;endl,</span></span><br><span class="line"><span class="comment">// 那么你的返回类型也掩饰一个ostream对象</span></span><br><span class="line"><span class="comment">// 最后ostream类的源码，我们是不可见的，所以我们不能通过成员函数来实现操作符重载，</span></span><br><span class="line"><span class="comment">// 所以这里只能使用友元函数来实现，这也是友元函数的最大用武之地</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现非常简单，只要把s的值传递给ostream对象，然后返回就可以了</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cin-gt-gt-s"><a href="#cin-gt-gt-s" class="headerlink" title="cin &gt;&gt; s;"></a>cin &gt;&gt; s;</h2><p>从键盘键入内容传递给对象也是一个基本的业务，实现方式和cout类似，因此不做过多说明了</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s-i"><a href="#s-i" class="headerlink" title="s[i];"></a>s[i];</h2><p>根据索引获取对象的值，需要对[]操作符进行重载</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// 返回的值一个字符，所以函数的返回类型为char，索引是int型，同时不希望对象被改变，所以用const</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ch[i]; <span class="comment">//直接返回ch的索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s-“abc”-s1-s2"><a href="#s-“abc”-s1-s2" class="headerlink" title="s == “abc”; s1 == s2;"></a>s == “abc”; s1 == s2;</h2><p>判断是否相等有两种情况，一是判断一个对象是否和一个字符串相等，一是判断两个对象是否相等</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//都是一些比较简单的业务逻辑</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>*p) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">      <span class="comment">//strcmp(s1,s2)   s1=s2返回0，s1&gt;s2返回大于0的值，s1&lt;s2返回小于0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整施工"><a href="#完整施工" class="headerlink" title="完整施工"></a>完整施工</h1><p>接下来还有一部分操作符重载，远离都类似就不再展开细讲了，下面给出封装完成的MyString类：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*实现自定义字符串类*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//私有成员变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Length;</span><br><span class="line">    <span class="keyword">char</span> * ch;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//构造和析构</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyString(<span class="keyword">int</span> length = <span class="number">0</span>);<span class="comment">//对象内存空间分配构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p);<span class="comment">//对象初始化构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> MyString &amp;obj);<span class="comment">//拷贝构造函数  </span></span><br><span class="line">    ~MyString();<span class="comment">//析构函数  </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//返回长度   </span></span><br><span class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;<span class="comment">//[]操作符   </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;  <span class="comment">//==操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;<span class="comment">// !=操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(MyString &amp; s);<span class="comment">// &gt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(MyString &amp; s);<span class="comment">// &lt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *p); <span class="comment">//=操作符 字符串赋值 </span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s); <span class="comment">//=操作符 用一个对象给另一个对象赋值 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s); <span class="comment">// &lt;&lt;操作符  </span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s); <span class="comment">//  &gt;&gt;操作符  </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line">MyString::MyString(<span class="keyword">int</span> length) &#123;</span><br><span class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp;obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = obj.Length;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~MyString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"对象"&lt;&lt;this&lt;&lt;"析构完成"&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"><span class="keyword">int</span> MyString::length() &#123;</span><br><span class="line">    <span class="keyword">return</span> Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * MyString::c_str()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * MyString::c_str() <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []操作符重载</span></span><br><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i)  <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s == "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">        <span class="comment">//strcmp(s1,s2)相等返回为0，s1 若大于s2 则返回大于0 的值。s1 若小于s2 则返回小于0 的值。</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s1 == s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// !=操作符重载 调用方式：s1 != "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 调用方式：s1 != s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = "abc"</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = s2</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = s.Length ;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载==============================================</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>操作符重载</tag>
        <tag>友元函数</tag>
        <tag>对象的构造和析构</tag>
      </tags>
  </entry>
  <entry>
    <title>C++自定义实现MyString类的封装(一)</title>
    <url>/2019/10/29/C-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0MyString%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文通过封装一个自定义的字符串类MyString来讲解C++面向对象的一些基础内容，主要涉及以下几个方面，知识讲解以代码注释为主，这样更容易理解：</p>
<ul>
<li>函数重载</li>
<li>类的构造和析构</li>
<li>const操作符</li>
<li>引用</li>
<li>操作符重载</li>
</ul>
<h1 id="一、-搭建类的框架"><a href="#一、-搭建类的框架" class="headerlink" title="一、 搭建类的框架"></a>一、 搭建类的框架</h1><p>我采用类的声明和类的实现分离的做法，因此这个类会有两个文件，其中MyString.hpp是类的声明，这里定义了类的成员变量和类的成员函数。</p>
<h2 id="MyString-hpp"><a href="#MyString-hpp" class="headerlink" title="MyString.hpp"></a>MyString.hpp</h2><p>我使用的编译器是Xcode，其他编译器的后缀名是.h，关于.hpp和.h不是本文的重点，不作说明，感兴趣的可以自行查找相关文献。</p>
<p>以下代码为新建一个类时，编译器自动生成代码，没有什么难点，因此只做部分注释。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once <span class="comment">// 防止头文件被重复引用，多次引用只有一次有效</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure>

<h2 id="MyString-cpp"><a href="#MyString-cpp" class="headerlink" title="MyString.cpp"></a>MyString.cpp</h2><p>同样由编译器自动生成，不过也可以手动创建，以下为编译器自动生成代码，只有一行，因为还没有做类的成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br></pre></td></tr></table></figure>

<h1 id="二、-MyString要实现的基础业务需求"><a href="#二、-MyString要实现的基础业务需求" class="headerlink" title="二、 MyString要实现的基础业务需求"></a>二、 MyString要实现的基础业务需求</h1><p>在实现功能之前先确定类的成员变量，之后实现功能我用调用方式来说明。</p>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>一个字符串首先必须有一个长度，其次就是字符串的内容，因此有了如下的变量声明，同时我们不希望类的内部实现被外界看到，也就是说，我们不希望用户直接对成员变量进行操作，因此这里定义成私有变量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Length;</span><br><span class="line">	<span class="keyword">char</span> * ch;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s"><a href="#MyString-s" class="headerlink" title="MyString s;"></a>MyString s;</h2><p>第一个应用场景就是声明一个变量，这里就需要开始对象的构造了，因此我们需要在MyString.hpp中定义构造函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(); <span class="comment">//在之前的文章里简单的讲解过构造函数和析构函数的语法：函数名和类名相同</span></span><br></pre></td></tr></table></figure>

<p>然后在MyString.cpp文件中实现该函数的业务逻辑：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString()<span class="comment">//类的声明和实现分离语法   类名::函数名()&#123;函数体&#125;</span></span><br><span class="line">&#123;</span><br><span class="line">	Length = <span class="number">0</span>; <span class="comment">//声明时没有赋值，因此字符串的长度应该是0</span></span><br><span class="line">  ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; <span class="comment">//分配内存，多分配一个长度，留给"/0"</span></span><br><span class="line">  <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); <span class="comment">//这时候的字符串是一个空串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s-“abc”"><a href="#MyString-s-“abc”" class="headerlink" title="MyString  s = “abc”;"></a>MyString  s = “abc”;</h2><p>第二个场景是声明的同时初始化一个变量，同样是对象的构造：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p); <span class="comment">//1.我们只是用一下传入的参数，为了防止意外错误，我们不希望这个参数被改变，因此定义成const</span></span><br><span class="line"><span class="comment">//2.同样是构造函数，因此函数名和类名相同，但是接受的参数不同，所以这里就是函数重载。要说明的是：函数重载的判断标准是函数的参数列表，并不是函数的返回类型</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Mystring.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">  <span class="comment">//1. 传入的p可能是一个空值，如果是空值，那就和无参构造函数相同</span></span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    Length = <span class="number">0</span>; </span><br><span class="line">    ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; </span><br><span class="line">    <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p); <span class="comment">//获取传入字符串长度</span></span><br><span class="line">    ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(ch, p);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s1-s2"><a href="#MyString-s1-s2" class="headerlink" title="MyString s1 = s2;"></a>MyString s1 = s2;</h2><p>第三个场景是用一个变量区初始化另一个变量，也是对象的构造，但这里是拷贝构造函数：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> MyString &amp; obj); <span class="comment">//用一个对象初始化另一个对象，传入的参数应该是MyString对象，同时我们不需要对obj直接进行操作，也不希望obj在使用过程中被意外的改变，因此将obj定义为一个const引用，在用一个对象初始化另一个对象的时候，编译器就会自动调用拷贝构造函数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp; obj)&#123;</span><br><span class="line">  <span class="comment">//这里用到了this指针，也可以不用，this指针指明了当前被操作的对象，他也是函数的一个参数，只不过没有显式的定义出来，在c++编译器的内部已经帮我们定义好了</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;Length = obj.Length; <span class="comment">//复制对象的长度</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>]; <span class="comment">//分配内存</span></span><br><span class="line">  <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch); <span class="comment">//复制对象的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象的析构"><a href="#对象的析构" class="headerlink" title="对象的析构"></a>对象的析构</h2><p>在类封装完成之前，我们还不完全知道哪些地方分配了内存，需要在对象销毁时释放内存空间，因此，对象的析构可以在类的封装结束后再实现，这里先打一个框架，不做实现</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~MyString();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::~MyString()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后说明: 构造函数和析构函数，我们规定采用public声明，因此上述函数的声明都是在public字段中的</p>
</blockquote>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>操作符重载</tag>
        <tag>友元函数</tag>
        <tag>对象的构造和析构</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C++对象的构造和析构</title>
    <url>/2019/10/22/C-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建一个对象时常常需要某些初始化工作，例如对成员变量的赋值等，但是类的成员变量不能在声明的时候赋值；同样的，在对象被销毁的时候也需要执行某些自动化操作，因此就有了对象的构造和析构函数。</p>
<h1 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>函数名和类相同的特殊成员函数，并且没有任何返回类型的声明。</p>
<h2 id="1-2-调用"><a href="#1-2-调用" class="headerlink" title="1.2 调用"></a>1.2 调用</h2><ul>
<li>编译器自动调用</li>
<li>手动调用</li>
</ul>
<h1 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2. 析构函数"></a>2. 析构函数</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>用于清理对象，没有返回类型声明，函数名为~ClassName()，在对象被销毁时自动调用。</p>
<h2 id="2-2-调用"><a href="#2-2-调用" class="headerlink" title="2.2 调用"></a>2.2 调用</h2><ul>
<li>编译器自动调用</li>
</ul>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>一些近况</title>
    <url>/2019/10/16/%E4%B8%80%E4%BA%9B%E8%BF%91%E5%86%B5/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加来必立评论功能</title>
    <url>/2019/09/29/Hexo%E6%B7%BB%E5%8A%A0%E6%9D%A5%E5%BF%85%E7%AB%8B%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>评论功能是博客网站的一个常用功能，开通评论版块就可以和读者互动起来，Hexo支持多种第三方评论接入，本文以livere（如果打不开网站，可能需要fq）评论为例。</p>
<h1 id="Step1-注册账号"><a href="#Step1-注册账号" class="headerlink" title="Step1:注册账号"></a>Step1:注册账号</h1><blockquote>
<p>官网入口：<a href="https://www.livere.com/" target="_blank" rel="noopener">https://www.livere.com</a></p>
</blockquote>
<p>注册登陆之后选择安装免费的city版，之后你会在你的管理页面看到以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"根据你的秘钥更改"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   (<span class="function"><span class="keyword">function</span><span class="params">(d, s)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line"><span class="actionscript">       j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span></span><br><span class="line"><span class="actionscript">       j.async = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line"><span class="javascript">   &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Step2-创建livere-ejs"><a href="#Step2-创建livere-ejs" class="headerlink" title="Step2: 创建livere.ejs"></a>Step2: 创建livere.ejs</h1><p>在你的主题/layout/_partial/post目录下创建文件livere.ejs，讲上述代码复制进去。</p>
<p>同时在你的主题_config.yml文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">livere:</span><br><span class="line">  enable:true</span><br></pre></td></tr></table></figure>

<h1 id="Step3-加载livere-ejs"><a href="#Step3-加载livere-ejs" class="headerlink" title="Step3: 加载livere.ejs"></a>Step3: 加载livere.ejs</h1><p>接着在_partial目录下的artical.ejs中你想要插入评论的位置（我是直接放在最后）加入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">theme.livere.enable</span> &amp;&amp; <span class="attr">post.comments</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">livere</span>', &#123;</span></span><br><span class="line"><span class="tag">      <span class="attr">key:</span> <span class="attr">post.slug</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">title:</span> <span class="attr">post.title</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">url:</span> <span class="attr">config.url</span>+<span class="attr">url_for</span>(<span class="attr">post.path</span>)</span></span><br><span class="line"><span class="tag">    &#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<p>好了，大功告成，效果如下：</p>
<p><img src="/imgs/livere.jpg" alt></p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>livere</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加分享功能</title>
    <url>/2019/09/29/hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>本文所用的第三方分享接口是mob，仅供参考，目前存在一个问题，mob提供的js是http协议的，如果你的网站是https协议的，评论功能会被部分浏览器屏蔽（firefox，chrome，edge，360都会屏蔽，目前只知道qq浏览器可以加载，其他浏览器需要手动阻止屏蔽）</p>
<h1 id="Step1-官网注册"><a href="#Step1-官网注册" class="headerlink" title="Step1: 官网注册"></a>Step1: 官网注册</h1><blockquote>
<p>地址：<a href="http://www.mob.com/" target="_blank" rel="noopener">http://www.mob.com/</a></p>
</blockquote>
<p>选择sharesdk，添加应用，用你网站名称命名即可。</p>
<h1 id="Step2-创建share-ejs"><a href="#Step2-创建share-ejs" class="headerlink" title="Step2: 创建share.ejs"></a>Step2: 创建share.ejs</h1><p>在你的主题layout/_partial/post目录下创建share.ejs，写入以下代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-button -mob-share-open"</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"-mob-share-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"-mob-share"</span> <span class="attr">src</span>=<span class="string">"http://f1.webshare.mob.com/code/mob-share.js?appkey=mob_share.appkey&gt;&lt;/script&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;!--MOB SHARE END--&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Step3-加载share-ejs"><a href="#Step3-加载share-ejs" class="headerlink" title="Step3: 加载share.ejs"></a>Step3: 加载share.ejs</h1><p>在你的主题_config.yml文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mob_share: </span><br><span class="line">  enable: true</span><br><span class="line">  appkey: 填你自己的appkey</span><br></pre></td></tr></table></figure>

<p>接着在_partial目录下的artical.ejs中你想要插入分享的位置加入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.mob_share.enable)&#123; %&gt;</span><br><span class="line">   &lt;%- partial(&apos;post/share&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>至此你的博客网站就有了分享功能了。</p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>mob</tag>
      </tags>
  </entry>
  <entry>
    <title>map/reduce/filter函数</title>
    <url>/2019/09/26/map-reduce-filter%E5%87%BD%E6%95%B0-md/</url>
    <content><![CDATA[<p>map/reduce/fliter 是python中较为常用的内建高阶函数（一个函数接收另一个函数作为参数，这种函数称之为高阶函数）</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="调用形式"><a href="#调用形式" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>map(function,sequence)</p>
</blockquote>
<p>解析：sequence是一个序列，function是一个函数，map函数对sequence中的每一个元素依次将其传入并执行function函数，最终将结果作为一个list返回，python3中返回的是一个迭代器。</p>
<h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">res = map(square, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res'</span>), res, list(res))</span><br><span class="line"><span class="comment"># python3中map返回的是一个迭代器，要转化为列表或者元祖才能看到想要的输出</span></span><br><span class="line">res2 = map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># map函数同样适用于lambda匿名函数</span></span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res2'</span>), res2, list(res2))</span><br><span class="line"><span class="comment"># 进阶应用</span></span><br><span class="line">funcs = [square, double]</span><br><span class="line">res3 = map(<span class="keyword">lambda</span> func: func(<span class="number">3</span>), funcs)</span><br><span class="line">print(list(res3))</span><br></pre></td></tr></table></figure>

<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>res &lt;map object at 0x7f5b949eb940&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>res2 &lt;map object at 0x7f5b949eba20&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>[9, 6]</p>
</blockquote>
<p><br><br></p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><h3 id="调用形式-1"><a href="#调用形式-1" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>reduce(functions,sequence)</p>
</blockquote>
<p>解析：先将sequence的前两个值传入function，function的返回值和sequence的下一个值作为function新的两个参数，以此迭代</p>
<h4 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># reduce函数包含在functools模块中</span></span><br><span class="line">res4 = reduce(<span class="keyword">lambda</span> x ,y : x +y ,[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res4:'</span>), res4)</span><br></pre></td></tr></table></figure>

<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>res4: 4950</p>
</blockquote>
<p><br><br></p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><h3 id="调用形式-2"><a href="#调用形式-2" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>filter(function,sequence)</p>
</blockquote>
<p>解析：将sequence中的元素依次传入function，将返回值为True的元素组成一个list/tuple/string（取决于sequence类型，python3返回迭代器）</p>
<h4 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res5 = filter(<span class="keyword">lambda</span> x: x % <span class="number">3</span> == <span class="number">0</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)])</span><br><span class="line">print(list(res5))</span><br></pre></td></tr></table></figure>

<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48]</p>
</blockquote>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><li>map/reduce/filter为函数式编程提供了很多便利，可以让代码更加简洁
</li><li>map/reduce/filter在python2中返回的是基本数据类型，python3返回迭代器
</li>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>高阶函数</tag>
      </tags>
  </entry>
</search>
