<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++算法题：两数相加</title>
    <url>/3873536879.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p>示例：</p>
<p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="题目所用的结构体链表定义和调用方式"><a href="#题目所用的结构体链表定义和调用方式" class="headerlink" title="题目所用的结构体链表定义和调用方式"></a>题目所用的结构体链表定义和调用方式</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//Definition for singly-linked list.</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>这种方法的大致思想是先获取输入两个链表的长度，如果长度不一致，就在长度短的末尾补0对齐，然后逐位相加，并且考虑进位，将结果保存到新的链表中就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *l = <span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">//存储结果</span></span><br><span class="line">        ListNode *p1 = l1; <span class="comment">//间接操作变量的指针</span></span><br><span class="line">        ListNode *p2 = l2;</span><br><span class="line">        ListNode *p = l;</span><br><span class="line">        <span class="keyword">int</span> len1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取长度</span></span><br><span class="line">        <span class="keyword">while</span>(p1-&gt;next)&#123;</span><br><span class="line">            len1 += <span class="number">1</span>;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p2-&gt;next)&#123;</span><br><span class="line">            len2 += <span class="number">1</span>;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = len1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//长度短的后面补0对齐</span></span><br><span class="line">        <span class="keyword">if</span>(len1&gt;len2)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len1-len2; i++)&#123;</span><br><span class="line">                p2-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                p2 = p2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len2&gt;len1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len2-len1; i++)&#123;</span><br><span class="line">                p1-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                p1 = p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            len = len2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> move; <span class="comment">//进位标记</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        temp = l1-&gt;val + l2-&gt;val;</span><br><span class="line">        <span class="comment">//如果第一个有进位</span></span><br><span class="line">        <span class="keyword">if</span>(temp + p-&gt;val &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            p-&gt;val += temp - <span class="number">10</span>;</span><br><span class="line">            move = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            p-&gt;val += temp;</span><br><span class="line">            move = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(move)&#123;</span><br><span class="line">                p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>); <span class="comment">//接收上一位过来的进位</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">//上一位没有发生进位</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            temp = l1-&gt;next-&gt;val + l2-&gt;next-&gt;val;</span><br><span class="line">            <span class="keyword">if</span>(temp + p-&gt;val &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">                p-&gt;val += temp - <span class="number">10</span>;</span><br><span class="line">                move = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                p-&gt;val += temp;</span><br><span class="line">                move = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果最后一个还有进位</span></span><br><span class="line">        <span class="keyword">if</span>(move)&#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>将l1和l2的数取出来直接相加，将结果逐位分离后存储到新的链表，这种方法最简单，但是一点都不推荐，因为相加的结果会可能会溢出，超出C++所能表示的整数的最大范围，我在LeetCode提交代码的时候，就遇到了这样的问题，在我本地我试了几个例子是没有问题的，但是，LeetCode还是非常严格的，我一开始用的是int，LeetCode测试用例用了比int范围大的数，我换成long和long long，他马上又用比这两个还大的数。。。我无话可说了。。。接受现实吧，类似操作少用为妙。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> num2 = <span class="number">0</span>;</span><br><span class="line">        ListNode *p1 = l1;</span><br><span class="line">        ListNode *p2 = l2;</span><br><span class="line">        <span class="keyword">int</span> len1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p1-&gt;next)&#123;</span><br><span class="line">            len1 += <span class="number">1</span>;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p2-&gt;next)&#123;</span><br><span class="line">            len2 += <span class="number">1</span>;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = l1; p2 = l2; <span class="comment">//重置指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len1<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            num1 += p1-&gt;val * <span class="built_in">pow</span>(<span class="number">10</span>, i);</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        num1 += p1-&gt;val * <span class="built_in">pow</span>(<span class="number">10</span>, len1<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len2<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            num2 += p2-&gt;val * <span class="built_in">pow</span>(<span class="number">10</span>, i);</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        num2 += p2-&gt;val * <span class="built_in">pow</span>(<span class="number">10</span>, len2<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">long</span> res = num1 + num2;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode *l = <span class="keyword">new</span> ListNode(res%<span class="number">10</span>);</span><br><span class="line">        ListNode *p = l;</span><br><span class="line">        res = res/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(res)&#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(res%<span class="number">10</span>);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            res = res/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>C++算法题：两数之和</title>
    <url>/2301220432.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p>
</blockquote>
<h1 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h1><p>直接用嵌套循环遍历数组中所有元素，找到符合的两个元素，第二层循环从第一层循环的下一个元素开始遍历，所以这种方法的算法复杂度为：$O(n^2)$ 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> ans = target - nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans == nums[j])&#123;</span><br><span class="line">                    v.push_back(i);</span><br><span class="line">                    v.push_back(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="使用map"><a href="#使用map" class="headerlink" title="使用map"></a>使用map</h1><p>算法复杂度为 $O(n) $。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dict.count(target-nums[i]) &amp;&amp; i != dict[target-nums[i]])&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;dict[target-nums[i]],i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            dict[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>LeetCode运行结果（第一行为暴力求解，第二行为使用map）</p>
</blockquote>
<p><img src="/imgs/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.png" alt></p>
<p>关于C++哈希表的讲解请点击<a href="https://zhuqixing007.github.io/1">这里</a></p>
]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++自定义实现MyString类的封装（二）</title>
    <url>/1887828332.html</url>
    <content><![CDATA[<h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>在上一篇文章里我们实现了MyString类的构造和析构函数，所讲解的内容包含类的声明和实现分离、构造和析构函数的语法、const限定符的部分使用场景、引用的部分使用场景、this指针、函数重载这几个内容。</p>
<p>本文要讲解的主要内容是操作符重载，实际上操作符重载可以被认为是函数重载的一种特殊情况。讲解内容以MyString类为例，注释形式为主，今天我们继续扩展MyString类的功能。</p>
<h1 id="MyString类功能增强"><a href="#MyString类功能增强" class="headerlink" title="MyString类功能增强"></a>MyString类功能增强</h1><p>与前文相同，从功能的调用方式入手。</p>
<h2 id="cout-lt-lt-s"><a href="#cout-lt-lt-s" class="headerlink" title="cout &lt;&lt; s;"></a>cout &lt;&lt; s;</h2><p>对象被创建以后，用户需要看到对象中的内容，所以我们就需要实现将s输出到屏幕上，看代码：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s);</span><br><span class="line"><span class="comment">// 首先cout是一个输出流，他是一个ostream对象，所以接受的函数参数是一个ostream类型加一个MyString类型</span></span><br><span class="line"><span class="comment">// 其次如果你希望&lt;&lt;操作符支持链式编程，也就是可以这样调用:cout&lt;&lt;s&lt;&lt;"abc"&lt;&lt;endl,</span></span><br><span class="line"><span class="comment">// 那么你的返回类型也掩饰一个ostream对象</span></span><br><span class="line"><span class="comment">// 最后ostream类的源码，我们是不可见的，所以我们不能通过成员函数来实现操作符重载，</span></span><br><span class="line"><span class="comment">// 所以这里只能使用友元函数来实现，这也是友元函数的最大用武之地</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现非常简单，只要把s的值传递给ostream对象，然后返回就可以了</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cin-gt-gt-s"><a href="#cin-gt-gt-s" class="headerlink" title="cin &gt;&gt; s;"></a>cin &gt;&gt; s;</h2><p>从键盘键入内容传递给对象也是一个基本的业务，实现方式和cout类似，因此不做过多说明了</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s-i"><a href="#s-i" class="headerlink" title="s[i];"></a>s[i];</h2><p>根据索引获取对象的值，需要对[]操作符进行重载</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// 返回的值一个字符，所以函数的返回类型为char，索引是int型，同时不希望对象被改变，所以用const</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ch[i]; <span class="comment">//直接返回ch的索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s-“abc”-s1-s2"><a href="#s-“abc”-s1-s2" class="headerlink" title="s == “abc”; s1 == s2;"></a>s == “abc”; s1 == s2;</h2><p>判断是否相等有两种情况，一是判断一个对象是否和一个字符串相等，一是判断两个对象是否相等</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//都是一些比较简单的业务逻辑</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>*p) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">      <span class="comment">//strcmp(s1,s2)   s1=s2返回0，s1&gt;s2返回大于0的值，s1&lt;s2返回小于0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整施工"><a href="#完整施工" class="headerlink" title="完整施工"></a>完整施工</h1><p>接下来还有一部分操作符重载，远离都类似就不再展开细讲了，下面给出封装完成的MyString类：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*实现自定义字符串类*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//私有成员变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Length;</span><br><span class="line">    <span class="keyword">char</span> * ch;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//构造和析构</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyString(<span class="keyword">int</span> length = <span class="number">0</span>);<span class="comment">//对象内存空间分配构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p);<span class="comment">//对象初始化构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> MyString &amp;obj);<span class="comment">//拷贝构造函数  </span></span><br><span class="line">    ~MyString();<span class="comment">//析构函数  </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//返回长度   </span></span><br><span class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;<span class="comment">//[]操作符   </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;  <span class="comment">//==操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;<span class="comment">// !=操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(MyString &amp; s);<span class="comment">// &gt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(MyString &amp; s);<span class="comment">// &lt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *p); <span class="comment">//=操作符 字符串赋值 </span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s); <span class="comment">//=操作符 用一个对象给另一个对象赋值 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s); <span class="comment">// &lt;&lt;操作符  </span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s); <span class="comment">//  &gt;&gt;操作符  </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line">MyString::MyString(<span class="keyword">int</span> length) &#123;</span><br><span class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp;obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = obj.Length;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~MyString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"对象"&lt;&lt;this&lt;&lt;"析构完成"&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"><span class="keyword">int</span> MyString::length() &#123;</span><br><span class="line">    <span class="keyword">return</span> Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * MyString::c_str()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * MyString::c_str() <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []操作符重载</span></span><br><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i)  <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s == "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">        <span class="comment">//strcmp(s1,s2)相等返回为0，s1 若大于s2 则返回大于0 的值。s1 若小于s2 则返回小于0 的值。</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s1 == s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// !=操作符重载 调用方式：s1 != "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 调用方式：s1 != s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = "abc"</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = s2</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = s.Length ;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载==============================================</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>操作符重载</tag>
        <tag>友元函数</tag>
        <tag>对象的构造和析构</tag>
      </tags>
  </entry>
  <entry>
    <title>C++自定义实现MyString类的封装(一)</title>
    <url>/764912066.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文通过封装一个自定义的字符串类MyString来讲解C++面向对象的一些基础内容，主要涉及以下几个方面，知识讲解以代码注释为主，这样更容易理解：</p>
<ul>
<li>函数重载</li>
<li>类的构造和析构</li>
<li>const操作符</li>
<li>引用</li>
<li>操作符重载</li>
</ul>
<h1 id="一、-搭建类的框架"><a href="#一、-搭建类的框架" class="headerlink" title="一、 搭建类的框架"></a>一、 搭建类的框架</h1><p>我采用类的声明和类的实现分离的做法，因此这个类会有两个文件，其中MyString.hpp是类的声明，这里定义了类的成员变量和类的成员函数。</p>
<h2 id="MyString-hpp"><a href="#MyString-hpp" class="headerlink" title="MyString.hpp"></a>MyString.hpp</h2><p>我使用的编译器是Xcode，其他编译器的后缀名是.h，关于.hpp和.h不是本文的重点，不作说明，感兴趣的可以自行查找相关文献。</p>
<p>以下代码为新建一个类时，编译器自动生成代码，没有什么难点，因此只做部分注释。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once <span class="comment">// 防止头文件被重复引用，多次引用只有一次有效</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure>

<h2 id="MyString-cpp"><a href="#MyString-cpp" class="headerlink" title="MyString.cpp"></a>MyString.cpp</h2><p>同样由编译器自动生成，不过也可以手动创建，以下为编译器自动生成代码，只有一行，因为还没有做类的成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br></pre></td></tr></table></figure>

<h1 id="二、-MyString要实现的基础业务需求"><a href="#二、-MyString要实现的基础业务需求" class="headerlink" title="二、 MyString要实现的基础业务需求"></a>二、 MyString要实现的基础业务需求</h1><p>在实现功能之前先确定类的成员变量，之后实现功能我用调用方式来说明。</p>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>一个字符串首先必须有一个长度，其次就是字符串的内容，因此有了如下的变量声明，同时我们不希望类的内部实现被外界看到，也就是说，我们不希望用户直接对成员变量进行操作，因此这里定义成私有变量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Length;</span><br><span class="line">	<span class="keyword">char</span> * ch;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s"><a href="#MyString-s" class="headerlink" title="MyString s;"></a>MyString s;</h2><p>第一个应用场景就是声明一个变量，这里就需要开始对象的构造了，因此我们需要在MyString.hpp中定义构造函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(); <span class="comment">//在之前的文章里简单的讲解过构造函数和析构函数的语法：函数名和类名相同</span></span><br></pre></td></tr></table></figure>

<p>然后在MyString.cpp文件中实现该函数的业务逻辑：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString()<span class="comment">//类的声明和实现分离语法   类名::函数名()&#123;函数体&#125;</span></span><br><span class="line">&#123;</span><br><span class="line">	Length = <span class="number">0</span>; <span class="comment">//声明时没有赋值，因此字符串的长度应该是0</span></span><br><span class="line">  ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; <span class="comment">//分配内存，多分配一个长度，留给"/0"</span></span><br><span class="line">  <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); <span class="comment">//这时候的字符串是一个空串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s-“abc”"><a href="#MyString-s-“abc”" class="headerlink" title="MyString  s = “abc”;"></a>MyString  s = “abc”;</h2><p>第二个场景是声明的同时初始化一个变量，同样是对象的构造：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p); <span class="comment">//1.我们只是用一下传入的参数，为了防止意外错误，我们不希望这个参数被改变，因此定义成const</span></span><br><span class="line"><span class="comment">//2.同样是构造函数，因此函数名和类名相同，但是接受的参数不同，所以这里就是函数重载。要说明的是：函数重载的判断标准是函数的参数列表，并不是函数的返回类型</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Mystring.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">  <span class="comment">//1. 传入的p可能是一个空值，如果是空值，那就和无参构造函数相同</span></span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    Length = <span class="number">0</span>; </span><br><span class="line">    ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; </span><br><span class="line">    <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p); <span class="comment">//获取传入字符串长度</span></span><br><span class="line">    ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(ch, p);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s1-s2"><a href="#MyString-s1-s2" class="headerlink" title="MyString s1 = s2;"></a>MyString s1 = s2;</h2><p>第三个场景是用一个变量区初始化另一个变量，也是对象的构造，但这里是拷贝构造函数：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> MyString &amp; obj); <span class="comment">//用一个对象初始化另一个对象，传入的参数应该是MyString对象，同时我们不需要对obj直接进行操作，也不希望obj在使用过程中被意外的改变，因此将obj定义为一个const引用，在用一个对象初始化另一个对象的时候，编译器就会自动调用拷贝构造函数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp; obj)&#123;</span><br><span class="line">  <span class="comment">//这里用到了this指针，也可以不用，this指针指明了当前被操作的对象，他也是函数的一个参数，只不过没有显式的定义出来，在c++编译器的内部已经帮我们定义好了</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;Length = obj.Length; <span class="comment">//复制对象的长度</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>]; <span class="comment">//分配内存</span></span><br><span class="line">  <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch); <span class="comment">//复制对象的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象的析构"><a href="#对象的析构" class="headerlink" title="对象的析构"></a>对象的析构</h2><p>在类封装完成之前，我们还不完全知道哪些地方分配了内存，需要在对象销毁时释放内存空间，因此，对象的析构可以在类的封装结束后再实现，这里先打一个框架，不做实现</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~MyString();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::~MyString()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后说明: 构造函数和析构函数，我们规定采用public声明，因此上述函数的声明都是在public字段中的</p>
</blockquote>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>操作符重载</tag>
        <tag>友元函数</tag>
        <tag>对象的构造和析构</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C++对象的构造和析构</title>
    <url>/561343915.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建一个对象时常常需要某些初始化工作，例如对成员变量的赋值等，但是类的成员变量不能在声明的时候赋值；同样的，在对象被销毁的时候也需要执行某些自动化操作，因此就有了对象的构造和析构函数。</p>
<h1 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>函数名和类相同的特殊成员函数，并且没有任何返回类型的声明。</p>
<h2 id="1-2-调用"><a href="#1-2-调用" class="headerlink" title="1.2 调用"></a>1.2 调用</h2><ul>
<li>编译器自动调用</li>
<li>手动调用</li>
</ul>
<h1 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2. 析构函数"></a>2. 析构函数</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>用于清理对象，没有返回类型声明，函数名为~ClassName()，在对象被销毁时自动调用。</p>
<h2 id="2-2-调用"><a href="#2-2-调用" class="headerlink" title="2.2 调用"></a>2.2 调用</h2><ul>
<li>编译器自动调用</li>
</ul>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>一些近况</title>
    <url>/3937384991.html</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加来必立评论功能</title>
    <url>/1220187351.html</url>
    <content><![CDATA[<p>评论功能是博客网站的一个常用功能，开通评论版块就可以和读者互动起来，Hexo支持多种第三方评论接入，本文以livere（如果打不开网站，可能需要fq）评论为例。</p>
<h1 id="Step1-注册账号"><a href="#Step1-注册账号" class="headerlink" title="Step1:注册账号"></a>Step1:注册账号</h1><blockquote>
<p>官网入口：<a href="https://www.livere.com/" target="_blank" rel="noopener">https://www.livere.com</a></p>
</blockquote>
<p>注册登陆之后选择安装免费的city版，之后你会在你的管理页面看到以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"根据你的秘钥更改"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   (<span class="function"><span class="keyword">function</span><span class="params">(d, s)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line"><span class="actionscript">       j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span></span><br><span class="line"><span class="actionscript">       j.async = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line"><span class="javascript">   &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Step2-创建livere-ejs"><a href="#Step2-创建livere-ejs" class="headerlink" title="Step2: 创建livere.ejs"></a>Step2: 创建livere.ejs</h1><p>在你的主题/layout/_partial/post目录下创建文件livere.ejs，讲上述代码复制进去。</p>
<p>同时在你的主题_config.yml文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">livere:</span><br><span class="line">  enable:true</span><br></pre></td></tr></table></figure>

<h1 id="Step3-加载livere-ejs"><a href="#Step3-加载livere-ejs" class="headerlink" title="Step3: 加载livere.ejs"></a>Step3: 加载livere.ejs</h1><p>接着在_partial目录下的artical.ejs中你想要插入评论的位置（我是直接放在最后）加入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">theme.livere.enable</span> &amp;&amp; <span class="attr">post.comments</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">livere</span>', &#123;</span></span><br><span class="line"><span class="tag">      <span class="attr">key:</span> <span class="attr">post.slug</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">title:</span> <span class="attr">post.title</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">url:</span> <span class="attr">config.url</span>+<span class="attr">url_for</span>(<span class="attr">post.path</span>)</span></span><br><span class="line"><span class="tag">    &#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<p>好了，大功告成，效果如下：</p>
<p><img src="/imgs/livere.jpg" alt></p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>livere</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加分享功能</title>
    <url>/1625753387.html</url>
    <content><![CDATA[<p>本文所用的第三方分享接口是mob，仅供参考，目前存在一个问题，mob提供的js是http协议的，如果你的网站是https协议的，评论功能会被部分浏览器屏蔽（firefox，chrome，edge，360都会屏蔽，目前只知道qq浏览器可以加载，其他浏览器需要手动阻止屏蔽）</p>
<h1 id="Step1-官网注册"><a href="#Step1-官网注册" class="headerlink" title="Step1: 官网注册"></a>Step1: 官网注册</h1><blockquote>
<p>地址：<a href="http://www.mob.com/" target="_blank" rel="noopener">http://www.mob.com/</a></p>
</blockquote>
<p>选择sharesdk，添加应用，用你网站名称命名即可。</p>
<h1 id="Step2-创建share-ejs"><a href="#Step2-创建share-ejs" class="headerlink" title="Step2: 创建share.ejs"></a>Step2: 创建share.ejs</h1><p>在你的主题layout/_partial/post目录下创建share.ejs，写入以下代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-button -mob-share-open"</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"-mob-share-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"-mob-share"</span> <span class="attr">src</span>=<span class="string">"http://f1.webshare.mob.com/code/mob-share.js?appkey=mob_share.appkey&gt;&lt;/script&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;!--MOB SHARE END--&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Step3-加载share-ejs"><a href="#Step3-加载share-ejs" class="headerlink" title="Step3: 加载share.ejs"></a>Step3: 加载share.ejs</h1><p>在你的主题_config.yml文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mob_share: </span><br><span class="line">  enable: true</span><br><span class="line">  appkey: 填你自己的appkey</span><br></pre></td></tr></table></figure>

<p>接着在_partial目录下的artical.ejs中你想要插入分享的位置加入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.mob_share.enable)&#123; %&gt;</span><br><span class="line">   &lt;%- partial(&apos;post/share&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>至此你的博客网站就有了分享功能了。</p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>mob</tag>
      </tags>
  </entry>
  <entry>
    <title>map/reduce/filter函数</title>
    <url>/957718428.html</url>
    <content><![CDATA[<p>map/reduce/fliter 是python中较为常用的内建高阶函数（一个函数接收另一个函数作为参数，这种函数称之为高阶函数）</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="调用形式"><a href="#调用形式" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>map(function,sequence)</p>
</blockquote>
<p>解析：sequence是一个序列，function是一个函数，map函数对sequence中的每一个元素依次将其传入并执行function函数，最终将结果作为一个list返回，python3中返回的是一个迭代器。</p>
<h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">res = map(square, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res'</span>), res, list(res))</span><br><span class="line"><span class="comment"># python3中map返回的是一个迭代器，要转化为列表或者元祖才能看到想要的输出</span></span><br><span class="line">res2 = map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># map函数同样适用于lambda匿名函数</span></span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res2'</span>), res2, list(res2))</span><br><span class="line"><span class="comment"># 进阶应用</span></span><br><span class="line">funcs = [square, double]</span><br><span class="line">res3 = map(<span class="keyword">lambda</span> func: func(<span class="number">3</span>), funcs)</span><br><span class="line">print(list(res3))</span><br></pre></td></tr></table></figure>

<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>res &lt;map object at 0x7f5b949eb940&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>res2 &lt;map object at 0x7f5b949eba20&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>[9, 6]</p>
</blockquote>
<p><br><br></p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><h3 id="调用形式-1"><a href="#调用形式-1" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>reduce(functions,sequence)</p>
</blockquote>
<p>解析：先将sequence的前两个值传入function，function的返回值和sequence的下一个值作为function新的两个参数，以此迭代</p>
<h4 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># reduce函数包含在functools模块中</span></span><br><span class="line">res4 = reduce(<span class="keyword">lambda</span> x ,y : x +y ,[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res4:'</span>), res4)</span><br></pre></td></tr></table></figure>

<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>res4: 4950</p>
</blockquote>
<p><br><br></p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><h3 id="调用形式-2"><a href="#调用形式-2" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>filter(function,sequence)</p>
</blockquote>
<p>解析：将sequence中的元素依次传入function，将返回值为True的元素组成一个list/tuple/string（取决于sequence类型，python3返回迭代器）</p>
<h4 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res5 = filter(<span class="keyword">lambda</span> x: x % <span class="number">3</span> == <span class="number">0</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)])</span><br><span class="line">print(list(res5))</span><br></pre></td></tr></table></figure>

<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48]</p>
</blockquote>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><li>map/reduce/filter为函数式编程提供了很多便利，可以让代码更加简洁
</li><li>map/reduce/filter在python2中返回的是基本数据类型，python3返回迭代器
</li>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>高阶函数</tag>
      </tags>
  </entry>
</search>
