<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建kubernetes学习环境01</title>
      <link href="/121557479.html"/>
      <url>/121557479.html</url>
      
        <content type="html"><![CDATA[<h2 id="搭建kuberbetes学习环境"><a href="#搭建kuberbetes学习环境" class="headerlink" title="搭建kuberbetes学习环境"></a>搭建kuberbetes学习环境</h2><h3 id="0-查看本机是否支持虚拟化"><a href="#0-查看本机是否支持虚拟化" class="headerlink" title="0. 查看本机是否支持虚拟化"></a>0. 查看本机是否支持虚拟化</h3><p>如下命令有输出即代表支持，个别电脑默认关闭了CPU虚拟化，需要到BIOS中去打开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -E --color 'vmx|svm' /proc/cpuinfo    #Linux</span><br><span class="line">sysctl -a | grep -E --color 'machdep.cpu.features|VMX'    #Mac</span><br></pre></td></tr></table></figure><p>由于本机Linux环境为虚拟机安装，在虚拟机安装的系统中不支持再次虚拟化，因此搭建环境调整为实体机Mac OS环境，系统版本为10.15.6。</p><h3 id="1-安装并配置kubectl"><a href="#1-安装并配置kubectl" class="headerlink" title="1. 安装并配置kubectl"></a>1. 安装并配置kubectl</h3><p>在 Kubernetes 上使用 Kubernetes 命令行工具 kubectl 部署和管理应用程序。使用 kubectl，可以检查集群资源；创建、删除和更新组件；查看新集群；并启动实例应用程序。</p><p>安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubernetes-cli</span><br></pre></td></tr></table></figure><p><b>此处有坑:</b> brew update没有反应，原因是brew默认使用国外镜像源，替换成科大镜像源即可，之前做过同样尝试未果，没在继续研究，今天一并解决了，之前同样做法没有成功的原因是没有到处环境变量，导致镜像切换后未生效，以下是解决方案：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/core)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/cask)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"><span class="comment"># bash和zsh导出环境变量略有不同，我是zsh，具体操作如下</span></span><br><span class="line"><span class="comment"># bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/'</span> ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># zsh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/'</span>  ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>解决brew问题之后，就可以顺利安装kubectl，官网在这个步骤之后还有一个配置kubectl，其实无需配置，后面会讲到，因此如果按照官网指示用检查kubectl配置命令报错，也暂时不用管。</p><h3 id="2-安装Minikube"><a href="#2-安装Minikube" class="headerlink" title="2. 安装Minikube"></a>2. 安装Minikube</h3><p>Minikube 是一种可以在本地轻松运行 Kubernetes 的工具。Minikube 在笔记本电脑上的虚拟机（VM）中运行单节点 Kubernetes 集群，供那些希望尝试 Kubernetes 或进行日常开发的用户使用。</p><p>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install minikube</span><br></pre></td></tr></table></figure><p>确认 hypervisor 和 Minikube 均已成功安装，由于本机已安装vmware fusion，因此本次的hypervisior驱动我用的是vmwarefusion，但是<b>此处也有坑</b>，启动本地集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --vm-driver=vmwarefusion</span><br></pre></td></tr></table></figure><p>输出报错信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed to start node: startup failed: Failed to setup kubeconfig: HostIP not yet implemented for "vmwarefusion" driver</span><br></pre></td></tr></table></figure><p>百度无果，google给出了错误原因：vmwarefusion已经弃用，现在用的是vmware</p><p>找到错误原因就好办了，安装vmware驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docker-machine-driver-vmware</span><br></pre></td></tr></table></figure><p>现在用vmware重新启动本地集群，在这之前先清理刚才启动失败的集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minikube delete</span><br><span class="line">minikube start --vm-driver=vmware</span><br></pre></td></tr></table></figure><p>启动顺利，没有报错，查看集群状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">minikube status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出如下， 表明启动成功</span></span><br><span class="line">minikube</span><br><span class="line">type: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br></pre></td></tr></table></figure><p>这时候再去运行检查kubectl配置命令，就会返回url响应，并且在用户目录下自动生成了.kube目录</p><p>运行<code>minikube dashboard</code>可以在浏览器中打开dashboard</p><p>To be continue……</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始做一个无界面的2048</title>
      <link href="/230921126.html"/>
      <url>/230921126.html</url>
      
        <content type="html"><![CDATA[<h1 id="初始化随机矩阵"><a href="#初始化随机矩阵" class="headerlink" title="初始化随机矩阵"></a>初始化随机矩阵</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个4*4的矩阵，并在随机的两个位置随机生成2或4</span></span><br><span class="line">matrix = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    atrix.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        matrix[i].append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    x = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    y = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    matrix[x][y] = random.choice([<span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> matrix:</span><br><span class="line">    print(<span class="string">' '</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> m]))</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h1 id="按移动方向将所有非0数排到前面"><a href="#按移动方向将所有非0数排到前面" class="headerlink" title="按移动方向将所有非0数排到前面"></a>按移动方向将所有非0数排到前面</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check0</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="comment"># 按移动方向将所有非0数排到前面</span></span><br><span class="line">    flag1 = <span class="number">1</span> </span><br><span class="line">    <span class="keyword">while</span> flag1 == <span class="number">1</span>:</span><br><span class="line">        flag1 = <span class="number">0</span></span><br><span class="line">        flag2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">            <span class="keyword">if</span> flag2 == <span class="number">1</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">                flag1 = <span class="number">1</span>  <span class="comment"># 0后面出现非0数</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                flag2 = <span class="number">1</span>  <span class="comment"># 出现0</span></span><br><span class="line">        <span class="keyword">if</span> flag1 == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> l[i] == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 非0数前移</span></span><br><span class="line">                    l[i] = l[i + <span class="number">1</span>]</span><br><span class="line">                    l[i + <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure><blockquote><p>输入输出示例：</p><p>输入：[0,0,2,2]</p><p>输出：[2,2,0,0]</p></blockquote><h1 id="定义移动规则"><a href="#定义移动规则" class="headerlink" title="定义移动规则"></a>定义移动规则</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(l)</span>:</span></span><br><span class="line">    l = check0(l)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> l[i] == l[i + <span class="number">1</span>]:</span><br><span class="line">            l[i] *= <span class="number">2</span></span><br><span class="line">            l[i + <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> check0(l)</span><br></pre></td></tr></table></figure><blockquote><p>输入输出示例：</p><p>输入：[0,0,2,2]</p><p>输出：[4,0,0,0]</p></blockquote><h1 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h1><p>简化了移动的操作逻辑，比如上移操作就是将矩阵转置后左移，再把矩阵转置回来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertMatrix</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        res.append([])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            res[i].append(matrix[j][i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="实现上下左右移动"><a href="#实现上下左右移动" class="headerlink" title="实现上下左右移动"></a>实现上下左右移动</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveLeft</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        matrix[i] = move(matrix[i])</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveRight</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="comment"># move()函数默认是将列表左移，所以将列表反转后左移，再反转也就是右移</span></span><br><span class="line">        matrix[i].reverse()</span><br><span class="line">        matrix[i] = move(matrix[i])</span><br><span class="line">        matrix[i].reverse()</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveUp</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> convertMatrix(moveLeft(convertMatrix(matrix)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveDown</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> convertMatrix(moveRight(convertMatrix(matrix)))</span><br></pre></td></tr></table></figure><h1 id="移动结束后在随机位置添加随机新数字"><a href="#移动结束后在随机位置添加随机新数字" class="headerlink" title="移动结束后在随机位置添加随机新数字"></a>移动结束后在随机位置添加随机新数字</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddNewNum</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    new_num = random.choice([<span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line">    positions = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] == <span class="number">0</span>:</span><br><span class="line">                positions.append([i, j])</span><br><span class="line">    <span class="keyword">if</span> len(positions) &gt; <span class="number">0</span>:</span><br><span class="line">        position = random.choice(positions)</span><br><span class="line">        matrix[position[<span class="number">0</span>]][position[<span class="number">1</span>]] = new_num</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br></pre></td></tr></table></figure><p>到这里，我们就完成了游戏的主要逻辑代码</p><h1 id="创建游戏的类"><a href="#创建游戏的类" class="headerlink" title="创建游戏的类"></a>创建游戏的类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game2048</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = []</span><br><span class="line">        self.__mcopy = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCanves</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="comment"># 初始化4*4的矩阵</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            self.__matrix.append([])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                self.__matrix[i].append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            x = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">            y = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">            self.__matrix[x][y] = random.choice([<span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.__matrix:</span><br><span class="line">            print(<span class="string">' '</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> m]))</span><br><span class="line">        print()</span><br><span class="line">        self.__mcopy = copy.deepcopy(self.__matrix)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Up</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = moveLogic.moveUp(self.__matrix)</span><br><span class="line">        self.UpDateCanves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Down</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = moveLogic.moveDown(self.__matrix)</span><br><span class="line">        self.UpDateCanves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Left</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = moveLogic.moveLeft(self.__matrix)</span><br><span class="line">        self.UpDateCanves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Right</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__matrix = moveLogic.moveRight(self.__matrix)</span><br><span class="line">        self.UpDateCanves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">UpDateCanves</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="comment"># 移动后输出新矩阵</span></span><br><span class="line">        <span class="keyword">if</span> self.__mcopy != self.__matrix:</span><br><span class="line">            self.__matrix = moveLogic.AddNewNum(self.__matrix)</span><br><span class="line">            self.__mcopy = copy.deepcopy(self.__matrix)</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.__matrix:</span><br><span class="line">            print(<span class="string">' '</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> m]))</span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GameOver</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="comment"># 如果上下左右都不能移动，那么游戏结束</span></span><br><span class="line">        tempMatrix = copy.deepcopy(self.__matrix)</span><br><span class="line">        <span class="keyword">if</span> tempMatrix == moveLogic.moveRight(tempMatrix):</span><br><span class="line">            <span class="keyword">if</span> tempMatrix == moveLogic.moveLeft(tempMatrix):</span><br><span class="line">                <span class="keyword">if</span> tempMatrix == moveLogic.moveUp(tempMatrix):</span><br><span class="line">                    <span class="keyword">if</span> tempMatrix == moveLogic.moveDown(tempMatrix):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="让游戏运行起来"><a href="#让游戏运行起来" class="headerlink" title="让游戏运行起来"></a>让游戏运行起来</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">game = Game2048()</span><br><span class="line">game.setCanves()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> game.GameOver():</span><br><span class="line">    op = input(<span class="string">"输入移动方向（W上A左S下D右）："</span>)</span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">"W"</span>:</span><br><span class="line">        game.Up()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">"A"</span>:</span><br><span class="line">        game.Left()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">"S"</span>:</span><br><span class="line">        game.Down()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">"D"</span>:</span><br><span class="line">        game.Right()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"移动方向输入错误！"</span>)</span><br><span class="line">print(<span class="string">"游戏结束"</span>)</span><br></pre></td></tr></table></figure><p>到这里一个完整的无界面2048小游戏就完成了，本文的任务完成，后面有时间再做图形界面</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的vector用法全解</title>
      <link href="/402551672.html"/>
      <url>/402551672.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是vector"><a href="#一、什么是vector" class="headerlink" title="一、什么是vector"></a>一、什么是vector</h1><p>vector是C++的模版类，它是一种动态数组，可以在动态的插入，删除，追加元素，使用vector必须包含头文件vector，同时vector包含在名称空间std中，因此使用它还必须使用using编译指令或者std::vector。</p><h1 id="二、vector的创建"><a href="#二、vector的创建" class="headerlink" title="二、vector的创建"></a>二、vector的创建</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1; <span class="comment">//声明一个int型vector变量</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2(<span class="number">5</span>); <span class="comment">//声明一个int型vector变量，且长度为5</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//声明的同时初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、vector的函数用法"><a href="#三、vector的函数用法" class="headerlink" title="三、vector的函数用法"></a>三、vector的函数用法</h1><h2 id="push-back"><a href="#push-back" class="headerlink" title="push_back()"></a>push_back()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.push_back(<span class="number">1</span>); <span class="comment">//在v的最后增加元素1</span></span><br></pre></td></tr></table></figure><h2 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v1.insert(v1.begin(), <span class="number">2</span>); <span class="comment">//在v1的第一个元素前面插入2</span></span><br><span class="line">v1.insert(v1.begin(), <span class="number">10</span>, <span class="number">1</span>); <span class="comment">//在v1的第一个元素前面插入10个1</span></span><br><span class="line">v1.insert(v1.begin(), v2.begin(), v2.end()); <span class="comment">//在v1的第一个元素前面插入v2</span></span><br></pre></td></tr></table></figure><h2 id="erase"><a href="#erase" class="headerlink" title="erase()"></a>erase()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1.erase(v1.begin()+<span class="number">1</span>); <span class="comment">//删除第二个元素</span></span><br><span class="line">v1.erase(v1.begin(), v1.begin()+<span class="number">2</span>); <span class="comment">//删除[0,2)的元素</span></span><br></pre></td></tr></table></figure><h2 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back()"></a>pop_back()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.pop_back(); <span class="comment">//删除最后一个元素</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.clear(); <span class="comment">//清空v1</span></span><br></pre></td></tr></table></figure><h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.at(<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1的第二个元素</span></span><br></pre></td></tr></table></figure><h2 id="front"><a href="#front" class="headerlink" title="front()"></a>front()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.front()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1首元素</span></span><br></pre></td></tr></table></figure><h2 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.back()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1尾元素</span></span><br></pre></td></tr></table></figure><h2 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;*(v1.begin())&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//begin()返回指向首元素的指针，用*解除引用，输出首元素值</span></span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;*(v1.begin())&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//用法同上</span></span><br></pre></td></tr></table></figure><h2 id="rbegin"><a href="#rbegin" class="headerlink" title="rbegin()"></a>rbegin()</h2><p>与end()相同</p><h2 id="rend"><a href="#rend" class="headerlink" title="rend()"></a>rend()</h2><p>与begin()相同</p><h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.empty(); <span class="comment">//判断vector是否为空</span></span><br></pre></td></tr></table></figure><h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = v1.size(); <span class="comment">//返回元素个数</span></span><br></pre></td></tr></table></figure><h2 id="capacity"><a href="#capacity" class="headerlink" title="capacity()"></a>capacity()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.capacity(); <span class="comment">//获取v1定义的容量</span></span><br></pre></td></tr></table></figure><h2 id="max-size"><a href="#max-size" class="headerlink" title="max_size()"></a>max_size()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.max_size(); <span class="comment">//返回vector的最大可容纳元素数量</span></span><br></pre></td></tr></table></figure><h2 id="swap"><a href="#swap" class="headerlink" title="swap()"></a>swap()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.swap(v2); <span class="comment">//交换v1和v2</span></span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(v1.begin(), v1.end()); <span class="comment">//从小到大排序</span></span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(v1.begin(), v1.end()); <span class="comment">//从大到小排序</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++多态的一点理解</title>
      <link href="/1722786178.html"/>
      <url>/1722786178.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、-什么是C-的多态"><a href="#一、-什么是C-的多态" class="headerlink" title="一、 什么是C++的多态"></a>一、 什么是C++的多态</h1><p>多态顾名思义就是一种调用语句会出现不同的表现形态，多态的出现与类的继承有关，下面来看一个例子吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在下面的例子中A是父类,B是A的一个子类,并且A和B中都有一个fun函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">example</span><span class="params">(A &amp;a)</span></span>&#123;</span><br><span class="line">  a.fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a;</span><br><span class="line">  B b;</span><br><span class="line">  example(a);<span class="comment">//正常接受的是A类的一个对象，没有发生多态，所以调用的还是A类中的fun函数</span></span><br><span class="line">  example(b);<span class="comment">//接受的是A类子类的对象，可能发生多态，也可能不发生多态，具体什么时候发生下面再讲，</span></span><br><span class="line">  <span class="comment">//如果有多态发生，那么这里调用的就是B类的fun函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、多态实现的条件"><a href="#二、多态实现的条件" class="headerlink" title="二、多态实现的条件"></a>二、多态实现的条件</h1><ul><li>要有继承</li><li>虚函数重写</li><li>父类指针或引用指向子类对象</li></ul><p>看下面结合代码的讲解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//virtual关键字表明这是一个虚函数</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"父类"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A&#123;<span class="comment">//此处发生了继承</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//虚函数重写</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"子类"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(A *a)</span></span>&#123;<span class="comment">//传入一个父类指针</span></span><br><span class="line">    a-&gt;print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    test(&amp;a);<span class="comment">//父类指针指向父类对象，未发生多态，输出为"父类"</span></span><br><span class="line">    test(&amp;b);<span class="comment">//父类指针指向了子类对象，多态发生，输出为"子类"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、-多态在C-编译器内部是如何实现的"><a href="#三、-多态在C-编译器内部是如何实现的" class="headerlink" title="三、 多态在C++编译器内部是如何实现的"></a>三、 多态在C++编译器内部是如何实现的</h1><p>当类中声明虚函数时，编译器会在类中生成一个虚函数表，虚函数表是一个存储类成员函数指针的数据结构，由编译器自动生成与维护的，virtual成员函数会被编译器放入虚函数表中，存在虚函数时，每个对象中都有一个指向虚函数表的指针(vptr)。</p><p>通过虚函数表指针VPTR调用重写函数是在程序运行时进行的，因此需要通过寻址操作才能确定真正应该调用的函数，所以多态发生时C++编译器不需要区分是子类对象还是父类对象。而普通成员函数是在编译时就确定了调用的函数。因此出于效率考虑，没有必要将所有成员函数都声明为虚函数  </p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法题：无重复字符的最长子串</title>
      <link href="/3522518838.html"/>
      <url>/3522518838.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。</p><p>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这个题可以用滑动窗口来解决，首先定义窗口的起点和终点，所求最长子串的长度就是终点和起点的差值。</p><p>从第一个字符开始扫描，扫描前窗口的起点和终点都是0，扫描结束后起点为0，终点为1，所以第一次扫描所求的结果为1；然后开始下一次的扫描，如果终点字符没有出现在起点字符到终点字符前的字符之间，那么起点依然不变，终点向后滑动一个单位，否则将起点向后滑动至前面出现的最近的与终点字符相同的字符的下一个单位，以此类推，下面是代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; Mmap; <span class="comment">//用于保存s中字符的最新索引，用哈希表查找更快</span></span><br><span class="line">    <span class="keyword">int</span> sSize = s.size(); <span class="comment">//求s的长度</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, len = <span class="number">0</span>, max = <span class="number">0</span>; <span class="comment">//窗口起点，终点，长度，最大无重复子串长度</span></span><br><span class="line">    <span class="keyword">char</span> temp; <span class="comment">//临时存储字符</span></span><br><span class="line">    <span class="keyword">while</span>(end&lt;sSize)&#123;</span><br><span class="line">        temp = s[end]; </span><br><span class="line">        <span class="keyword">if</span>(Mmap.find(temp)!=Mmap.end() &amp;&amp; Mmap[temp]&gt;=start)&#123;</span><br><span class="line">            <span class="comment">//出现重复字符，改变起点位置</span></span><br><span class="line">            start = Mmap[temp] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Mmap[temp] = end; </span><br><span class="line">        end++;</span><br><span class="line">        len = end - start;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;len)&#123;</span><br><span class="line">            max = len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++自定义实现MyString类的封装（二）</title>
      <link href="/1887828332.html"/>
      <url>/1887828332.html</url>
      
        <content type="html"><![CDATA[<h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>在上一篇文章里我们实现了MyString类的构造和析构函数，所讲解的内容包含类的声明和实现分离、构造和析构函数的语法、const限定符的部分使用场景、引用的部分使用场景、this指针、函数重载这几个内容。</p><p>本文要讲解的主要内容是操作符重载，实际上操作符重载可以被认为是函数重载的一种特殊情况。讲解内容以MyString类为例，注释形式为主，今天我们继续扩展MyString类的功能。</p><h1 id="MyString类功能增强"><a href="#MyString类功能增强" class="headerlink" title="MyString类功能增强"></a>MyString类功能增强</h1><p>与前文相同，从功能的调用方式入手。</p><h2 id="cout-lt-lt-s"><a href="#cout-lt-lt-s" class="headerlink" title="cout &lt;&lt; s;"></a>cout &lt;&lt; s;</h2><p>对象被创建以后，用户需要看到对象中的内容，所以我们就需要实现将s输出到屏幕上，看代码：</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s);</span><br><span class="line"><span class="comment">// 首先cout是一个输出流，他是一个ostream对象，所以接受的函数参数是一个ostream类型加一个MyString类型</span></span><br><span class="line"><span class="comment">// 其次如果你希望&lt;&lt;操作符支持链式编程，也就是可以这样调用:cout&lt;&lt;s&lt;&lt;"abc"&lt;&lt;endl,</span></span><br><span class="line"><span class="comment">// 那么你的返回类型也掩饰一个ostream对象</span></span><br><span class="line"><span class="comment">// 最后ostream类的源码，我们是不可见的，所以我们不能通过成员函数来实现操作符重载，</span></span><br><span class="line"><span class="comment">// 所以这里只能使用友元函数来实现，这也是友元函数的最大用武之地</span></span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现非常简单，只要把s的值传递给ostream对象，然后返回就可以了</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cin-gt-gt-s"><a href="#cin-gt-gt-s" class="headerlink" title="cin &gt;&gt; s;"></a>cin &gt;&gt; s;</h2><p>从键盘键入内容传递给对象也是一个基本的业务，实现方式和cout类似，因此不做过多说明了</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s);</span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="s-i"><a href="#s-i" class="headerlink" title="s[i];"></a>s[i];</h2><p>根据索引获取对象的值，需要对[]操作符进行重载</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// 返回的值一个字符，所以函数的返回类型为char，索引是int型，同时不希望对象被改变，所以用const</span></span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ch[i]; <span class="comment">//直接返回ch的索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="s-“abc”-s1-s2"><a href="#s-“abc”-s1-s2" class="headerlink" title="s == “abc”; s1 == s2;"></a>s == “abc”; s1 == s2;</h2><p>判断是否相等有两种情况，一是判断一个对象是否和一个字符串相等，一是判断两个对象是否相等</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//都是一些比较简单的业务逻辑</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>*p) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">      <span class="comment">//strcmp(s1,s2)   s1=s2返回0，s1&gt;s2返回大于0的值，s1&lt;s2返回小于0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整施工"><a href="#完整施工" class="headerlink" title="完整施工"></a>完整施工</h1><p>接下来还有一部分操作符重载，远离都类似就不再展开细讲了，下面给出封装完成的MyString类：</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*实现自定义字符串类*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//私有成员变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Length;</span><br><span class="line">    <span class="keyword">char</span> * ch;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//构造和析构</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyString(<span class="keyword">int</span> length = <span class="number">0</span>);<span class="comment">//对象内存空间分配构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p);<span class="comment">//对象初始化构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> MyString &amp;obj);<span class="comment">//拷贝构造函数  </span></span><br><span class="line">    ~MyString();<span class="comment">//析构函数  </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//返回长度   </span></span><br><span class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;<span class="comment">//[]操作符   </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;  <span class="comment">//==操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;<span class="comment">// !=操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(MyString &amp; s);<span class="comment">// &gt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(MyString &amp; s);<span class="comment">// &lt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *p); <span class="comment">//=操作符 字符串赋值 </span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s); <span class="comment">//=操作符 用一个对象给另一个对象赋值 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s); <span class="comment">// &lt;&lt;操作符  </span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s); <span class="comment">//  &gt;&gt;操作符  </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line">MyString::MyString(<span class="keyword">int</span> length) &#123;</span><br><span class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp;obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = obj.Length;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~MyString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"对象"&lt;&lt;this&lt;&lt;"析构完成"&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"><span class="keyword">int</span> MyString::length() &#123;</span><br><span class="line">    <span class="keyword">return</span> Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * MyString::c_str()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * MyString::c_str() <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []操作符重载</span></span><br><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i)  <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s == "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">        <span class="comment">//strcmp(s1,s2)相等返回为0，s1 若大于s2 则返回大于0 的值。s1 若小于s2 则返回小于0 的值。</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s1 == s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// !=操作符重载 调用方式：s1 != "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 调用方式：s1 != s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = "abc"</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = s2</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = s.Length ;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载==============================================</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 操作符重载 </tag>
            
            <tag> 友元函数 </tag>
            
            <tag> 对象的构造和析构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++自定义实现MyString类的封装(一)</title>
      <link href="/764912066.html"/>
      <url>/764912066.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文通过封装一个自定义的字符串类MyString来讲解C++面向对象的一些基础内容，主要涉及以下几个方面，知识讲解以代码注释为主，这样更容易理解：</p><ul><li>函数重载</li><li>类的构造和析构</li><li>const操作符</li><li>引用</li><li>操作符重载</li></ul><h1 id="一、-搭建类的框架"><a href="#一、-搭建类的框架" class="headerlink" title="一、 搭建类的框架"></a>一、 搭建类的框架</h1><p>我采用类的声明和类的实现分离的做法，因此这个类会有两个文件，其中MyString.hpp是类的声明，这里定义了类的成员变量和类的成员函数。</p><h2 id="MyString-hpp"><a href="#MyString-hpp" class="headerlink" title="MyString.hpp"></a>MyString.hpp</h2><p>我使用的编译器是Xcode，其他编译器的后缀名是.h，关于.hpp和.h不是本文的重点，不作说明，感兴趣的可以自行查找相关文献。</p><p>以下代码为新建一个类时，编译器自动生成代码，没有什么难点，因此只做部分注释。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once <span class="comment">// 防止头文件被重复引用，多次引用只有一次有效</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure><h2 id="MyString-cpp"><a href="#MyString-cpp" class="headerlink" title="MyString.cpp"></a>MyString.cpp</h2><p>同样由编译器自动生成，不过也可以手动创建，以下为编译器自动生成代码，只有一行，因为还没有做类的成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br></pre></td></tr></table></figure><h1 id="二、-MyString要实现的基础业务需求"><a href="#二、-MyString要实现的基础业务需求" class="headerlink" title="二、 MyString要实现的基础业务需求"></a>二、 MyString要实现的基础业务需求</h1><p>在实现功能之前先确定类的成员变量，之后实现功能我用调用方式来说明。</p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>一个字符串首先必须有一个长度，其次就是字符串的内容，因此有了如下的变量声明，同时我们不希望类的内部实现被外界看到，也就是说，我们不希望用户直接对成员变量进行操作，因此这里定义成私有变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> Length;</span><br><span class="line"><span class="keyword">char</span> * ch;</span><br></pre></td></tr></table></figure><h2 id="MyString-s"><a href="#MyString-s" class="headerlink" title="MyString s;"></a>MyString s;</h2><p>第一个应用场景就是声明一个变量，这里就需要开始对象的构造了，因此我们需要在MyString.hpp中定义构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyString(); <span class="comment">//在之前的文章里简单的讲解过构造函数和析构函数的语法：函数名和类名相同</span></span><br></pre></td></tr></table></figure><p>然后在MyString.cpp文件中实现该函数的业务逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyString::MyString()<span class="comment">//类的声明和实现分离语法   类名::函数名()&#123;函数体&#125;</span></span><br><span class="line">&#123;</span><br><span class="line">Length = <span class="number">0</span>; <span class="comment">//声明时没有赋值，因此字符串的长度应该是0</span></span><br><span class="line">  ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; <span class="comment">//分配内存，多分配一个长度，留给"/0"</span></span><br><span class="line">  <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); <span class="comment">//这时候的字符串是一个空串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyString-s-“abc”"><a href="#MyString-s-“abc”" class="headerlink" title="MyString  s = “abc”;"></a>MyString  s = “abc”;</h2><p>第二个场景是声明的同时初始化一个变量，同样是对象的构造：</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p); <span class="comment">//1.我们只是用一下传入的参数，为了防止意外错误，我们不希望这个参数被改变，因此定义成const</span></span><br><span class="line"><span class="comment">//2.同样是构造函数，因此函数名和类名相同，但是接受的参数不同，所以这里就是函数重载。要说明的是：函数重载的判断标准是函数的参数列表，并不是函数的返回类型</span></span><br></pre></td></tr></table></figure><blockquote><p>Mystring.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">  <span class="comment">//1. 传入的p可能是一个空值，如果是空值，那就和无参构造函数相同</span></span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    Length = <span class="number">0</span>; </span><br><span class="line">    ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; </span><br><span class="line">    <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p); <span class="comment">//获取传入字符串长度</span></span><br><span class="line">    ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(ch, p);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyString-s1-s2"><a href="#MyString-s1-s2" class="headerlink" title="MyString s1 = s2;"></a>MyString s1 = s2;</h2><p>第三个场景是用一个变量区初始化另一个变量，也是对象的构造，但这里是拷贝构造函数：</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> MyString &amp; obj); <span class="comment">//用一个对象初始化另一个对象，传入的参数应该是MyString对象，同时我们不需要对obj直接进行操作，也不希望obj在使用过程中被意外的改变，因此将obj定义为一个const引用，在用一个对象初始化另一个对象的时候，编译器就会自动调用拷贝构造函数</span></span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp; obj)&#123;</span><br><span class="line">  <span class="comment">//这里用到了this指针，也可以不用，this指针指明了当前被操作的对象，他也是函数的一个参数，只不过没有显式的定义出来，在c++编译器的内部已经帮我们定义好了</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Length = obj.Length; <span class="comment">//复制对象的长度</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>]; <span class="comment">//分配内存</span></span><br><span class="line">  <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch); <span class="comment">//复制对象的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象的析构"><a href="#对象的析构" class="headerlink" title="对象的析构"></a>对象的析构</h2><p>在类封装完成之前，我们还不完全知道哪些地方分配了内存，需要在对象销毁时释放内存空间，因此，对象的析构可以在类的封装结束后再实现，这里先打一个框架，不做实现</p><blockquote><p>MyString.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~MyString();</span><br></pre></td></tr></table></figure><blockquote><p>MyString.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyString::~MyString()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后说明: 构造函数和析构函数，我们规定采用public声明，因此上述函数的声明都是在public字段中的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 操作符重载 </tag>
            
            <tag> 友元函数 </tag>
            
            <tag> 对象的构造和析构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识C++对象的构造和析构</title>
      <link href="/561343915.html"/>
      <url>/561343915.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建一个对象时常常需要某些初始化工作，例如对成员变量的赋值等，但是类的成员变量不能在声明的时候赋值；同样的，在对象被销毁的时候也需要执行某些自动化操作，因此就有了对象的构造和析构函数。</p><h1 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>函数名和类相同的特殊成员函数，并且没有任何返回类型的声明。</p><h2 id="1-2-调用"><a href="#1-2-调用" class="headerlink" title="1.2 调用"></a>1.2 调用</h2><ul><li>编译器自动调用</li><li>手动调用</li></ul><h1 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2. 析构函数"></a>2. 析构函数</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>用于清理对象，没有返回类型声明，函数名为~ClassName()，在对象被销毁时自动调用。</p><h2 id="2-2-调用"><a href="#2-2-调用" class="headerlink" title="2.2 调用"></a>2.2 调用</h2><ul><li>编译器自动调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些近况</title>
      <link href="/3937384991.html"/>
      <url>/3937384991.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map/reduce/filter函数</title>
      <link href="/957718428.html"/>
      <url>/957718428.html</url>
      
        <content type="html"><![CDATA[<p>map/reduce/fliter 是python中较为常用的内建高阶函数（一个函数接收另一个函数作为参数，这种函数称之为高阶函数）</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="调用形式"><a href="#调用形式" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote><p>map(function,sequence)</p></blockquote><p>解析：sequence是一个序列，function是一个函数，map函数对sequence中的每一个元素依次将其传入并执行function函数，最终将结果作为一个list返回，python3中返回的是一个迭代器。</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">res = map(square, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res'</span>), res, list(res))</span><br><span class="line"><span class="comment"># python3中map返回的是一个迭代器，要转化为列表或者元祖才能看到想要的输出</span></span><br><span class="line">res2 = map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># map函数同样适用于lambda匿名函数</span></span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res2'</span>), res2, list(res2))</span><br><span class="line"><span class="comment"># 进阶应用</span></span><br><span class="line">funcs = [square, double]</span><br><span class="line">res3 = map(<span class="keyword">lambda</span> func: func(<span class="number">3</span>), funcs)</span><br><span class="line">print(list(res3))</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote><p>res &lt;map object at 0x7f5b949eb940&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>res2 &lt;map object at 0x7f5b949eba20&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>[9, 6]</p></blockquote><p><br><br></p><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><h3 id="调用形式-1"><a href="#调用形式-1" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote><p>reduce(functions,sequence)</p></blockquote><p>解析：先将sequence的前两个值传入function，function的返回值和sequence的下一个值作为function新的两个参数，以此迭代</p><h4 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># reduce函数包含在functools模块中</span></span><br><span class="line">res4 = reduce(<span class="keyword">lambda</span> x ,y : x +y ,[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res4:'</span>), res4)</span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><blockquote><p>res4: 4950</p></blockquote><p><br><br></p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><h3 id="调用形式-2"><a href="#调用形式-2" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote><p>filter(function,sequence)</p></blockquote><p>解析：将sequence中的元素依次传入function，将返回值为True的元素组成一个list/tuple/string（取决于sequence类型，python3返回迭代器）</p><h4 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res5 = filter(<span class="keyword">lambda</span> x: x % <span class="number">3</span> == <span class="number">0</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)])</span><br><span class="line">print(list(res5))</span><br></pre></td></tr></table></figure><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><blockquote><p>[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48]</p></blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><li>map/reduce/filter为函数式编程提供了很多便利，可以让代码更加简洁</li><li>map/reduce/filter在python2中返回的是基本数据类型，python3返回迭代器</li>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高阶函数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
