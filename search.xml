<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++的vector用法全解</title>
    <url>/402551672.html</url>
    <content><![CDATA[<h1 id="一、什么是vector"><a href="#一、什么是vector" class="headerlink" title="一、什么是vector"></a>一、什么是vector</h1><p>vector是C++的模版类，它是一种动态数组，可以在动态的插入，删除，追加元素，使用vector必须包含头文件vector，同时vector包含在名称空间std中，因此使用它还必须使用using编译指令或者std::vector。</p>
<h1 id="二、vector的创建"><a href="#二、vector的创建" class="headerlink" title="二、vector的创建"></a>二、vector的创建</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1; <span class="comment">//声明一个int型vector变量</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2(<span class="number">5</span>); <span class="comment">//声明一个int型vector变量，且长度为5</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//声明的同时初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、vector的函数用法"><a href="#三、vector的函数用法" class="headerlink" title="三、vector的函数用法"></a>三、vector的函数用法</h1><h2 id="push-back"><a href="#push-back" class="headerlink" title="push_back()"></a>push_back()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.push_back(<span class="number">1</span>); <span class="comment">//在v的最后增加元素1</span></span><br></pre></td></tr></table></figure>

<h2 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.insert(v1.begin(), <span class="number">2</span>); <span class="comment">//在v1的第一个元素前面插入2</span></span><br><span class="line">v1.insert(v1.begin(), <span class="number">10</span>, <span class="number">1</span>); <span class="comment">//在v1的第一个元素前面插入10个1</span></span><br><span class="line">v1.insert(v1.begin(), v2.begin(), v2.end()); <span class="comment">//在v1的第一个元素前面插入v2</span></span><br></pre></td></tr></table></figure>

<h2 id="erase"><a href="#erase" class="headerlink" title="erase()"></a>erase()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.erase(v1.begin()+<span class="number">1</span>); <span class="comment">//删除第二个元素</span></span><br><span class="line">v1.erase(v1.begin(), v1.begin()+<span class="number">2</span>); <span class="comment">//删除[0,2)的元素</span></span><br></pre></td></tr></table></figure>

<h2 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back()"></a>pop_back()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.pop_back(); <span class="comment">//删除最后一个元素</span></span><br></pre></td></tr></table></figure>

<h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.clear(); <span class="comment">//清空v1</span></span><br></pre></td></tr></table></figure>

<h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.at(<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1的第二个元素</span></span><br></pre></td></tr></table></figure>

<h2 id="front"><a href="#front" class="headerlink" title="front()"></a>front()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.front()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1首元素</span></span><br></pre></td></tr></table></figure>

<h2 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;v1.back()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出v1尾元素</span></span><br></pre></td></tr></table></figure>

<h2 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;*(v1.begin())&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//begin()返回指向首元素的指针，用*解除引用，输出首元素值</span></span><br></pre></td></tr></table></figure>

<h2 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;*(v1.begin())&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//用法同上</span></span><br></pre></td></tr></table></figure>

<h2 id="rbegin"><a href="#rbegin" class="headerlink" title="rbegin()"></a>rbegin()</h2><p>与end()相同</p>
<h2 id="rend"><a href="#rend" class="headerlink" title="rend()"></a>rend()</h2><p>与begin()相同</p>
<h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.empty(); <span class="comment">//判断vector是否为空</span></span><br></pre></td></tr></table></figure>

<h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> len = v1.size(); <span class="comment">//返回元素个数</span></span><br></pre></td></tr></table></figure>

<h2 id="capacity"><a href="#capacity" class="headerlink" title="capacity()"></a>capacity()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.capacity(); <span class="comment">//获取v1定义的容量</span></span><br></pre></td></tr></table></figure>

<h2 id="max-size"><a href="#max-size" class="headerlink" title="max_size()"></a>max_size()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.max_size(); <span class="comment">//返回vector的最大可容纳元素数量</span></span><br></pre></td></tr></table></figure>

<h2 id="swap"><a href="#swap" class="headerlink" title="swap()"></a>swap()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.swap(v2); <span class="comment">//交换v1和v2</span></span><br></pre></td></tr></table></figure>

<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sort(v1.begin(), v1.end()); <span class="comment">//从小到大排序</span></span><br></pre></td></tr></table></figure>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">reverse(v1.begin(), v1.end()); <span class="comment">//从大到小排序</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中哈希表的一些知识</title>
    <url>/3512958606.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>关于C++多态的一点理解</title>
    <url>/1722786178.html</url>
    <content><![CDATA[<h1 id="一、-什么是C-的多态"><a href="#一、-什么是C-的多态" class="headerlink" title="一、 什么是C++的多态"></a>一、 什么是C++的多态</h1><p>多态顾名思义就是一种调用语句会出现不同的表现形态，多态的出现与类的继承有关，下面来看一个例子吧：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在下面的例子中A是父类,B是A的一个子类,并且A和B中都有一个fun函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">example</span><span class="params">(A &amp;a)</span></span>&#123;</span><br><span class="line">  a.fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a;</span><br><span class="line">  B b;</span><br><span class="line">  example(a);<span class="comment">//正常接受的是A类的一个对象，没有发生多态，所以调用的还是A类中的fun函数</span></span><br><span class="line">  example(b);<span class="comment">//接受的是A类子类的对象，可能发生多态，也可能不发生多态，具体什么时候发生下面再讲，</span></span><br><span class="line">  					<span class="comment">//如果有多态发生，那么这里调用的就是B类的fun函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、多态实现的条件"><a href="#二、多态实现的条件" class="headerlink" title="二、多态实现的条件"></a>二、多态实现的条件</h1><ul>
<li>要有继承</li>
<li>虚函数重写</li>
<li>父类指针或引用指向子类对象</li>
</ul>
<p>看下面结合代码的讲解</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//virtual关键字表明这是一个虚函数</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"父类"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A&#123;<span class="comment">//此处发生了继承</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//虚函数重写</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"子类"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(A *a)</span></span>&#123;<span class="comment">//传入一个父类指针</span></span><br><span class="line">    a-&gt;print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    test(&amp;a);<span class="comment">//父类指针指向父类对象，未发生多态，输出为"父类"</span></span><br><span class="line">    test(&amp;b);<span class="comment">//父类指针指向了子类对象，多态发生，输出为"子类"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、-多态在C-编译器内部是如何实现的"><a href="#三、-多态在C-编译器内部是如何实现的" class="headerlink" title="三、 多态在C++编译器内部是如何实现的"></a>三、 多态在C++编译器内部是如何实现的</h1><p>当类中声明虚函数时，编译器会在类中生成一个虚函数表，虚函数表是一个存储类成员函数指针的数据结构，由编译器自动生成与维护的，virtual成员函数会被编译器放入虚函数表中，存在虚函数时，每个对象中都有一个指向虚函数表的指针(vptr)。</p>
<p>通过虚函数表指针VPTR调用重写函数是在程序运行时进行的，因此需要通过寻址操作才能确定真正应该调用的函数，所以多态发生时C++编译器不需要区分是子类对象还是父类对象。而普通成员函数是在编译时就确定了调用的函数。因此出于效率考虑，没有必要将所有成员函数都声明为虚函数  </p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode算法题：无重复字符的最长子串</title>
    <url>/3522518838.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<p>示例 1:</p>
<p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p>
<p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p>
<p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。</p>
<p>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这个题可以用滑动窗口来解决，首先定义窗口的起点和终点，所求最长子串的长度就是终点和起点的差值。</p>
<p>从第一个字符开始扫描，扫描前窗口的起点和终点都是0，扫描结束后起点为0，终点为1，所以第一次扫描所求的结果为1；然后开始下一次的扫描，如果终点字符没有出现在起点字符到终点字符前的字符之间，那么起点依然不变，终点向后滑动一个单位，否则将起点向后滑动至前面出现的最近的与终点字符相同的字符的下一个单位，以此类推，下面是代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; Mmap; <span class="comment">//用于保存s中字符的最新索引，用哈希表查找更快</span></span><br><span class="line">    <span class="keyword">int</span> sSize = s.size(); <span class="comment">//求s的长度</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, len = <span class="number">0</span>, max = <span class="number">0</span>; <span class="comment">//窗口起点，终点，长度，最大无重复子串长度</span></span><br><span class="line">    <span class="keyword">char</span> temp; <span class="comment">//临时存储字符</span></span><br><span class="line">    <span class="keyword">while</span>(end&lt;sSize)&#123;</span><br><span class="line">        temp = s[end]; </span><br><span class="line">        <span class="keyword">if</span>(Mmap.find(temp)!=Mmap.end() &amp;&amp; Mmap[temp]&gt;=start)&#123;</span><br><span class="line">            <span class="comment">//出现重复字符，改变起点位置</span></span><br><span class="line">            start = Mmap[temp] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Mmap[temp] = end; </span><br><span class="line">        end++;</span><br><span class="line">        len = end - start;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;len)&#123;</span><br><span class="line">            max = len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode算法题：两数相加</title>
    <url>/3873536879.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p>示例：</p>
<p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="题目所用的结构体链表定义和调用方式"><a href="#题目所用的结构体链表定义和调用方式" class="headerlink" title="题目所用的结构体链表定义和调用方式"></a>题目所用的结构体链表定义和调用方式</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//Definition for singly-linked list.</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>这种方法的大致思想是先获取输入两个链表的长度，如果长度不一致，就在长度短的末尾补0对齐，然后逐位相加，并且考虑进位，将结果保存到新的链表中就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *l = <span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">//存储结果</span></span><br><span class="line">        ListNode *p1 = l1; <span class="comment">//间接操作变量的指针</span></span><br><span class="line">        ListNode *p2 = l2;</span><br><span class="line">        ListNode *p = l;</span><br><span class="line">        <span class="keyword">int</span> len1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取长度</span></span><br><span class="line">        <span class="keyword">while</span>(p1-&gt;next)&#123;</span><br><span class="line">            len1 += <span class="number">1</span>;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p2-&gt;next)&#123;</span><br><span class="line">            len2 += <span class="number">1</span>;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = len1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//长度短的后面补0对齐</span></span><br><span class="line">        <span class="keyword">if</span>(len1&gt;len2)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len1-len2; i++)&#123;</span><br><span class="line">                p2-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                p2 = p2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len2&gt;len1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len2-len1; i++)&#123;</span><br><span class="line">                p1-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                p1 = p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            len = len2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> move; <span class="comment">//进位标记</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        temp = l1-&gt;val + l2-&gt;val;</span><br><span class="line">        <span class="comment">//如果第一个有进位</span></span><br><span class="line">        <span class="keyword">if</span>(temp + p-&gt;val &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            p-&gt;val += temp - <span class="number">10</span>;</span><br><span class="line">            move = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            p-&gt;val += temp;</span><br><span class="line">            move = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(move)&#123;</span><br><span class="line">                p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>); <span class="comment">//接收上一位过来的进位</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">//上一位没有发生进位</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            temp = l1-&gt;next-&gt;val + l2-&gt;next-&gt;val;</span><br><span class="line">            <span class="keyword">if</span>(temp + p-&gt;val &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">                p-&gt;val += temp - <span class="number">10</span>;</span><br><span class="line">                move = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                p-&gt;val += temp;</span><br><span class="line">                move = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果最后一个还有进位</span></span><br><span class="line">        <span class="keyword">if</span>(move)&#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>将l1和l2的数取出来直接相加，将结果逐位分离后存储到新的链表，这种方法最简单，但是一点都不推荐，因为相加的结果会可能会溢出，超出C++所能表示的整数的最大范围，我在LeetCode提交代码的时候，就遇到了这样的问题，在我本地我试了几个例子是没有问题的，但是，LeetCode还是非常严格的，我一开始用的是int，LeetCode测试用例用了比int范围大的数，我换成long和long long，他马上又用比这两个还大的数。。。我无话可说了。。。接受现实吧，类似操作少用为妙。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> num2 = <span class="number">0</span>;</span><br><span class="line">        ListNode *p1 = l1;</span><br><span class="line">        ListNode *p2 = l2;</span><br><span class="line">        <span class="keyword">int</span> len1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p1-&gt;next)&#123;</span><br><span class="line">            len1 += <span class="number">1</span>;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p2-&gt;next)&#123;</span><br><span class="line">            len2 += <span class="number">1</span>;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = l1; p2 = l2; <span class="comment">//重置指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len1<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            num1 += p1-&gt;val * <span class="built_in">pow</span>(<span class="number">10</span>, i);</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        num1 += p1-&gt;val * <span class="built_in">pow</span>(<span class="number">10</span>, len1<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len2<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            num2 += p2-&gt;val * <span class="built_in">pow</span>(<span class="number">10</span>, i);</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        num2 += p2-&gt;val * <span class="built_in">pow</span>(<span class="number">10</span>, len2<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">long</span> res = num1 + num2;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode *l = <span class="keyword">new</span> ListNode(res%<span class="number">10</span>);</span><br><span class="line">        ListNode *p = l;</span><br><span class="line">        res = res/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(res)&#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(res%<span class="number">10</span>);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            res = res/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode算法题：两数之和</title>
    <url>/2301220432.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p>
</blockquote>
<h1 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h1><p>直接用嵌套循环遍历数组中所有元素，找到符合的两个元素，第二层循环从第一层循环的下一个元素开始遍历，所以这种方法的算法复杂度为：$O(n^2)$ 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> ans = target - nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans == nums[j])&#123;</span><br><span class="line">                    v.push_back(i);</span><br><span class="line">                    v.push_back(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="使用map"><a href="#使用map" class="headerlink" title="使用map"></a>使用map</h1><p>算法复杂度为 $O(n) $。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dict.count(target-nums[i]) &amp;&amp; i != dict[target-nums[i]])&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;dict[target-nums[i]],i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            dict[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>LeetCode运行结果（第一行为暴力求解，第二行为使用map）</p>
</blockquote>
<p><img src="/imgs/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.png" alt></p>
<p>关于C++哈希表的讲解请点击<a href="https://zhuqixing007.github.io/1">这里</a></p>
]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C++自定义实现MyString类的封装（二）</title>
    <url>/1887828332.html</url>
    <content><![CDATA[<h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>在上一篇文章里我们实现了MyString类的构造和析构函数，所讲解的内容包含类的声明和实现分离、构造和析构函数的语法、const限定符的部分使用场景、引用的部分使用场景、this指针、函数重载这几个内容。</p>
<p>本文要讲解的主要内容是操作符重载，实际上操作符重载可以被认为是函数重载的一种特殊情况。讲解内容以MyString类为例，注释形式为主，今天我们继续扩展MyString类的功能。</p>
<h1 id="MyString类功能增强"><a href="#MyString类功能增强" class="headerlink" title="MyString类功能增强"></a>MyString类功能增强</h1><p>与前文相同，从功能的调用方式入手。</p>
<h2 id="cout-lt-lt-s"><a href="#cout-lt-lt-s" class="headerlink" title="cout &lt;&lt; s;"></a>cout &lt;&lt; s;</h2><p>对象被创建以后，用户需要看到对象中的内容，所以我们就需要实现将s输出到屏幕上，看代码：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s);</span><br><span class="line"><span class="comment">// 首先cout是一个输出流，他是一个ostream对象，所以接受的函数参数是一个ostream类型加一个MyString类型</span></span><br><span class="line"><span class="comment">// 其次如果你希望&lt;&lt;操作符支持链式编程，也就是可以这样调用:cout&lt;&lt;s&lt;&lt;"abc"&lt;&lt;endl,</span></span><br><span class="line"><span class="comment">// 那么你的返回类型也掩饰一个ostream对象</span></span><br><span class="line"><span class="comment">// 最后ostream类的源码，我们是不可见的，所以我们不能通过成员函数来实现操作符重载，</span></span><br><span class="line"><span class="comment">// 所以这里只能使用友元函数来实现，这也是友元函数的最大用武之地</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现非常简单，只要把s的值传递给ostream对象，然后返回就可以了</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cin-gt-gt-s"><a href="#cin-gt-gt-s" class="headerlink" title="cin &gt;&gt; s;"></a>cin &gt;&gt; s;</h2><p>从键盘键入内容传递给对象也是一个基本的业务，实现方式和cout类似，因此不做过多说明了</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s-i"><a href="#s-i" class="headerlink" title="s[i];"></a>s[i];</h2><p>根据索引获取对象的值，需要对[]操作符进行重载</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// 返回的值一个字符，所以函数的返回类型为char，索引是int型，同时不希望对象被改变，所以用const</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ch[i]; <span class="comment">//直接返回ch的索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s-“abc”-s1-s2"><a href="#s-“abc”-s1-s2" class="headerlink" title="s == “abc”; s1 == s2;"></a>s == “abc”; s1 == s2;</h2><p>判断是否相等有两种情况，一是判断一个对象是否和一个字符串相等，一是判断两个对象是否相等</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//都是一些比较简单的业务逻辑</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>*p) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">      <span class="comment">//strcmp(s1,s2)   s1=s2返回0，s1&gt;s2返回大于0的值，s1&lt;s2返回小于0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整施工"><a href="#完整施工" class="headerlink" title="完整施工"></a>完整施工</h1><p>接下来还有一部分操作符重载，远离都类似就不再展开细讲了，下面给出封装完成的MyString类：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*实现自定义字符串类*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//私有成员变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Length;</span><br><span class="line">    <span class="keyword">char</span> * ch;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//构造和析构</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyString(<span class="keyword">int</span> length = <span class="number">0</span>);<span class="comment">//对象内存空间分配构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p);<span class="comment">//对象初始化构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> MyString &amp;obj);<span class="comment">//拷贝构造函数  </span></span><br><span class="line">    ~MyString();<span class="comment">//析构函数  </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//返回长度   </span></span><br><span class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;<span class="comment">//[]操作符   </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;  <span class="comment">//==操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;<span class="comment">// !=操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(MyString &amp; s);<span class="comment">// &gt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(MyString &amp; s);<span class="comment">// &lt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *p); <span class="comment">//=操作符 字符串赋值 </span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s); <span class="comment">//=操作符 用一个对象给另一个对象赋值 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s); <span class="comment">// &lt;&lt;操作符  </span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s); <span class="comment">//  &gt;&gt;操作符  </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line">MyString::MyString(<span class="keyword">int</span> length) &#123;</span><br><span class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp;obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = obj.Length;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~MyString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"对象"&lt;&lt;this&lt;&lt;"析构完成"&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"><span class="keyword">int</span> MyString::length() &#123;</span><br><span class="line">    <span class="keyword">return</span> Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * MyString::c_str()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * MyString::c_str() <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []操作符重载</span></span><br><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i)  <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s == "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">        <span class="comment">//strcmp(s1,s2)相等返回为0，s1 若大于s2 则返回大于0 的值。s1 若小于s2 则返回小于0 的值。</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s1 == s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// !=操作符重载 调用方式：s1 != "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 调用方式：s1 != s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = "abc"</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = s2</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = s.Length ;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载==============================================</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>操作符重载</tag>
        <tag>友元函数</tag>
        <tag>对象的构造和析构</tag>
      </tags>
  </entry>
  <entry>
    <title>C++自定义实现MyString类的封装(一)</title>
    <url>/764912066.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文通过封装一个自定义的字符串类MyString来讲解C++面向对象的一些基础内容，主要涉及以下几个方面，知识讲解以代码注释为主，这样更容易理解：</p>
<ul>
<li>函数重载</li>
<li>类的构造和析构</li>
<li>const操作符</li>
<li>引用</li>
<li>操作符重载</li>
</ul>
<h1 id="一、-搭建类的框架"><a href="#一、-搭建类的框架" class="headerlink" title="一、 搭建类的框架"></a>一、 搭建类的框架</h1><p>我采用类的声明和类的实现分离的做法，因此这个类会有两个文件，其中MyString.hpp是类的声明，这里定义了类的成员变量和类的成员函数。</p>
<h2 id="MyString-hpp"><a href="#MyString-hpp" class="headerlink" title="MyString.hpp"></a>MyString.hpp</h2><p>我使用的编译器是Xcode，其他编译器的后缀名是.h，关于.hpp和.h不是本文的重点，不作说明，感兴趣的可以自行查找相关文献。</p>
<p>以下代码为新建一个类时，编译器自动生成代码，没有什么难点，因此只做部分注释。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once <span class="comment">// 防止头文件被重复引用，多次引用只有一次有效</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure>

<h2 id="MyString-cpp"><a href="#MyString-cpp" class="headerlink" title="MyString.cpp"></a>MyString.cpp</h2><p>同样由编译器自动生成，不过也可以手动创建，以下为编译器自动生成代码，只有一行，因为还没有做类的成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br></pre></td></tr></table></figure>

<h1 id="二、-MyString要实现的基础业务需求"><a href="#二、-MyString要实现的基础业务需求" class="headerlink" title="二、 MyString要实现的基础业务需求"></a>二、 MyString要实现的基础业务需求</h1><p>在实现功能之前先确定类的成员变量，之后实现功能我用调用方式来说明。</p>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>一个字符串首先必须有一个长度，其次就是字符串的内容，因此有了如下的变量声明，同时我们不希望类的内部实现被外界看到，也就是说，我们不希望用户直接对成员变量进行操作，因此这里定义成私有变量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Length;</span><br><span class="line">	<span class="keyword">char</span> * ch;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s"><a href="#MyString-s" class="headerlink" title="MyString s;"></a>MyString s;</h2><p>第一个应用场景就是声明一个变量，这里就需要开始对象的构造了，因此我们需要在MyString.hpp中定义构造函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(); <span class="comment">//在之前的文章里简单的讲解过构造函数和析构函数的语法：函数名和类名相同</span></span><br></pre></td></tr></table></figure>

<p>然后在MyString.cpp文件中实现该函数的业务逻辑：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString()<span class="comment">//类的声明和实现分离语法   类名::函数名()&#123;函数体&#125;</span></span><br><span class="line">&#123;</span><br><span class="line">	Length = <span class="number">0</span>; <span class="comment">//声明时没有赋值，因此字符串的长度应该是0</span></span><br><span class="line">  ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; <span class="comment">//分配内存，多分配一个长度，留给"/0"</span></span><br><span class="line">  <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); <span class="comment">//这时候的字符串是一个空串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s-“abc”"><a href="#MyString-s-“abc”" class="headerlink" title="MyString  s = “abc”;"></a>MyString  s = “abc”;</h2><p>第二个场景是声明的同时初始化一个变量，同样是对象的构造：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p); <span class="comment">//1.我们只是用一下传入的参数，为了防止意外错误，我们不希望这个参数被改变，因此定义成const</span></span><br><span class="line"><span class="comment">//2.同样是构造函数，因此函数名和类名相同，但是接受的参数不同，所以这里就是函数重载。要说明的是：函数重载的判断标准是函数的参数列表，并不是函数的返回类型</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Mystring.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">  <span class="comment">//1. 传入的p可能是一个空值，如果是空值，那就和无参构造函数相同</span></span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    Length = <span class="number">0</span>; </span><br><span class="line">    ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; </span><br><span class="line">    <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p); <span class="comment">//获取传入字符串长度</span></span><br><span class="line">    ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(ch, p);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s1-s2"><a href="#MyString-s1-s2" class="headerlink" title="MyString s1 = s2;"></a>MyString s1 = s2;</h2><p>第三个场景是用一个变量区初始化另一个变量，也是对象的构造，但这里是拷贝构造函数：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> MyString &amp; obj); <span class="comment">//用一个对象初始化另一个对象，传入的参数应该是MyString对象，同时我们不需要对obj直接进行操作，也不希望obj在使用过程中被意外的改变，因此将obj定义为一个const引用，在用一个对象初始化另一个对象的时候，编译器就会自动调用拷贝构造函数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp; obj)&#123;</span><br><span class="line">  <span class="comment">//这里用到了this指针，也可以不用，this指针指明了当前被操作的对象，他也是函数的一个参数，只不过没有显式的定义出来，在c++编译器的内部已经帮我们定义好了</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;Length = obj.Length; <span class="comment">//复制对象的长度</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>]; <span class="comment">//分配内存</span></span><br><span class="line">  <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch); <span class="comment">//复制对象的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象的析构"><a href="#对象的析构" class="headerlink" title="对象的析构"></a>对象的析构</h2><p>在类封装完成之前，我们还不完全知道哪些地方分配了内存，需要在对象销毁时释放内存空间，因此，对象的析构可以在类的封装结束后再实现，这里先打一个框架，不做实现</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~MyString();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::~MyString()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后说明: 构造函数和析构函数，我们规定采用public声明，因此上述函数的声明都是在public字段中的</p>
</blockquote>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>操作符重载</tag>
        <tag>友元函数</tag>
        <tag>对象的构造和析构</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C++对象的构造和析构</title>
    <url>/561343915.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建一个对象时常常需要某些初始化工作，例如对成员变量的赋值等，但是类的成员变量不能在声明的时候赋值；同样的，在对象被销毁的时候也需要执行某些自动化操作，因此就有了对象的构造和析构函数。</p>
<h1 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>函数名和类相同的特殊成员函数，并且没有任何返回类型的声明。</p>
<h2 id="1-2-调用"><a href="#1-2-调用" class="headerlink" title="1.2 调用"></a>1.2 调用</h2><ul>
<li>编译器自动调用</li>
<li>手动调用</li>
</ul>
<h1 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2. 析构函数"></a>2. 析构函数</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>用于清理对象，没有返回类型声明，函数名为~ClassName()，在对象被销毁时自动调用。</p>
<h2 id="2-2-调用"><a href="#2-2-调用" class="headerlink" title="2.2 调用"></a>2.2 调用</h2><ul>
<li>编译器自动调用</li>
</ul>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>一些近况</title>
    <url>/3937384991.html</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加来必立评论功能</title>
    <url>/1220187351.html</url>
    <content><![CDATA[<p>评论功能是博客网站的一个常用功能，开通评论版块就可以和读者互动起来，Hexo支持多种第三方评论接入，本文以livere（如果打不开网站，可能需要fq）评论为例。</p>
<h1 id="Step1-注册账号"><a href="#Step1-注册账号" class="headerlink" title="Step1:注册账号"></a>Step1:注册账号</h1><blockquote>
<p>官网入口：<a href="https://www.livere.com/" target="_blank" rel="noopener">https://www.livere.com</a></p>
</blockquote>
<p>注册登陆之后选择安装免费的city版，之后你会在你的管理页面看到以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"根据你的秘钥更改"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   (<span class="function"><span class="keyword">function</span><span class="params">(d, s)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line"><span class="actionscript">       j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span></span><br><span class="line"><span class="actionscript">       j.async = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line"><span class="javascript">   &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Step2-创建livere-ejs"><a href="#Step2-创建livere-ejs" class="headerlink" title="Step2: 创建livere.ejs"></a>Step2: 创建livere.ejs</h1><p>在你的主题/layout/_partial/post目录下创建文件livere.ejs，讲上述代码复制进去。</p>
<p>同时在你的主题_config.yml文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">livere:</span><br><span class="line">  enable:true</span><br></pre></td></tr></table></figure>

<h1 id="Step3-加载livere-ejs"><a href="#Step3-加载livere-ejs" class="headerlink" title="Step3: 加载livere.ejs"></a>Step3: 加载livere.ejs</h1><p>接着在_partial目录下的artical.ejs中你想要插入评论的位置（我是直接放在最后）加入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">theme.livere.enable</span> &amp;&amp; <span class="attr">post.comments</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">livere</span>', &#123;</span></span><br><span class="line"><span class="tag">      <span class="attr">key:</span> <span class="attr">post.slug</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">title:</span> <span class="attr">post.title</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">url:</span> <span class="attr">config.url</span>+<span class="attr">url_for</span>(<span class="attr">post.path</span>)</span></span><br><span class="line"><span class="tag">    &#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<p>好了，大功告成，效果如下：</p>
<p><img src="/imgs/livere.jpg" alt></p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>livere</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加分享功能</title>
    <url>/1625753387.html</url>
    <content><![CDATA[<p>本文所用的第三方分享接口是mob，仅供参考，目前存在一个问题，mob提供的js是http协议的，如果你的网站是https协议的，评论功能会被部分浏览器屏蔽（firefox，chrome，edge，360都会屏蔽，目前只知道qq浏览器可以加载，其他浏览器需要手动阻止屏蔽）</p>
<h1 id="Step1-官网注册"><a href="#Step1-官网注册" class="headerlink" title="Step1: 官网注册"></a>Step1: 官网注册</h1><blockquote>
<p>地址：<a href="http://www.mob.com/" target="_blank" rel="noopener">http://www.mob.com/</a></p>
</blockquote>
<p>选择sharesdk，添加应用，用你网站名称命名即可。</p>
<h1 id="Step2-创建share-ejs"><a href="#Step2-创建share-ejs" class="headerlink" title="Step2: 创建share.ejs"></a>Step2: 创建share.ejs</h1><p>在你的主题layout/_partial/post目录下创建share.ejs，写入以下代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-button -mob-share-open"</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"-mob-share-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"-mob-share"</span> <span class="attr">src</span>=<span class="string">"http://f1.webshare.mob.com/code/mob-share.js?appkey=mob_share.appkey&gt;&lt;/script&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;!--MOB SHARE END--&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Step3-加载share-ejs"><a href="#Step3-加载share-ejs" class="headerlink" title="Step3: 加载share.ejs"></a>Step3: 加载share.ejs</h1><p>在你的主题_config.yml文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mob_share: </span><br><span class="line">  enable: true</span><br><span class="line">  appkey: 填你自己的appkey</span><br></pre></td></tr></table></figure>

<p>接着在_partial目录下的artical.ejs中你想要插入分享的位置加入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.mob_share.enable)&#123; %&gt;</span><br><span class="line">   &lt;%- partial(&apos;post/share&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>至此你的博客网站就有了分享功能了。</p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>mob</tag>
      </tags>
  </entry>
  <entry>
    <title>map/reduce/filter函数</title>
    <url>/957718428.html</url>
    <content><![CDATA[<p>map/reduce/fliter 是python中较为常用的内建高阶函数（一个函数接收另一个函数作为参数，这种函数称之为高阶函数）</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="调用形式"><a href="#调用形式" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>map(function,sequence)</p>
</blockquote>
<p>解析：sequence是一个序列，function是一个函数，map函数对sequence中的每一个元素依次将其传入并执行function函数，最终将结果作为一个list返回，python3中返回的是一个迭代器。</p>
<h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">res = map(square, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res'</span>), res, list(res))</span><br><span class="line"><span class="comment"># python3中map返回的是一个迭代器，要转化为列表或者元祖才能看到想要的输出</span></span><br><span class="line">res2 = map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># map函数同样适用于lambda匿名函数</span></span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res2'</span>), res2, list(res2))</span><br><span class="line"><span class="comment"># 进阶应用</span></span><br><span class="line">funcs = [square, double]</span><br><span class="line">res3 = map(<span class="keyword">lambda</span> func: func(<span class="number">3</span>), funcs)</span><br><span class="line">print(list(res3))</span><br></pre></td></tr></table></figure>

<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>res &lt;map object at 0x7f5b949eb940&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>res2 &lt;map object at 0x7f5b949eba20&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>[9, 6]</p>
</blockquote>
<p><br><br></p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><h3 id="调用形式-1"><a href="#调用形式-1" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>reduce(functions,sequence)</p>
</blockquote>
<p>解析：先将sequence的前两个值传入function，function的返回值和sequence的下一个值作为function新的两个参数，以此迭代</p>
<h4 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># reduce函数包含在functools模块中</span></span><br><span class="line">res4 = reduce(<span class="keyword">lambda</span> x ,y : x +y ,[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res4:'</span>), res4)</span><br></pre></td></tr></table></figure>

<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>res4: 4950</p>
</blockquote>
<p><br><br></p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><h3 id="调用形式-2"><a href="#调用形式-2" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>filter(function,sequence)</p>
</blockquote>
<p>解析：将sequence中的元素依次传入function，将返回值为True的元素组成一个list/tuple/string（取决于sequence类型，python3返回迭代器）</p>
<h4 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res5 = filter(<span class="keyword">lambda</span> x: x % <span class="number">3</span> == <span class="number">0</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)])</span><br><span class="line">print(list(res5))</span><br></pre></td></tr></table></figure>

<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48]</p>
</blockquote>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><li>map/reduce/filter为函数式编程提供了很多便利，可以让代码更加简洁
</li><li>map/reduce/filter在python2中返回的是基本数据类型，python3返回迭代器
</li>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>高阶函数</tag>
      </tags>
  </entry>
</search>
