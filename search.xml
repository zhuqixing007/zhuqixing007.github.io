<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++算法题：两数之和</title>
    <url>/2019/11/07/C-%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p>
</blockquote>
<h1 id="一、暴力求解"><a href="#一、暴力求解" class="headerlink" title="一、暴力求解"></a>一、暴力求解</h1><p>直接用嵌套循环遍历数组中所有元素，找到符合的两个元素，第二层循环从第一层循环的下一个元素开始遍历，所以这种方法的算法时间复杂度就是循环经历的次数：$O({(1+n)n\over2})$ ，空间复杂度：$ O(1) $。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> ans = target - nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans == nums[j])&#123;</span><br><span class="line">                    v.push_back(i);</span><br><span class="line">                    v.push_back(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="两遍哈希表"><a href="#两遍哈希表" class="headerlink" title="两遍哈希表"></a>两遍哈希表</h1><h1 id="一遍哈希表"><a href="#一遍哈希表" class="headerlink" title="一遍哈希表"></a>一遍哈希表</h1>]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++自定义实现MyString类的封装（二）</title>
    <url>/2019/10/30/C-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0MyString%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>在上一篇文章里我们实现了MyString类的构造和析构函数，所讲解的内容包含类的声明和实现分离、构造和析构函数的语法、const限定符的部分使用场景、引用的部分使用场景、this指针、函数重载这几个内容。</p>
<p>本文要讲解的主要内容是操作符重载，实际上操作符重载可以被认为是函数重载的一种特殊情况。讲解内容以MyString类为例，注释形式为主，今天我们继续扩展MyString类的功能。</p>
<h1 id="MyString类功能增强"><a href="#MyString类功能增强" class="headerlink" title="MyString类功能增强"></a>MyString类功能增强</h1><p>与前文相同，从功能的调用方式入手。</p>
<h2 id="cout-lt-lt-s"><a href="#cout-lt-lt-s" class="headerlink" title="cout &lt;&lt; s;"></a>cout &lt;&lt; s;</h2><p>对象被创建以后，用户需要看到对象中的内容，所以我们就需要实现将s输出到屏幕上，看代码：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s);</span><br><span class="line"><span class="comment">// 首先cout是一个输出流，他是一个ostream对象，所以接受的函数参数是一个ostream类型加一个MyString类型</span></span><br><span class="line"><span class="comment">// 其次如果你希望&lt;&lt;操作符支持链式编程，也就是可以这样调用:cout&lt;&lt;s&lt;&lt;"abc"&lt;&lt;endl,</span></span><br><span class="line"><span class="comment">// 那么你的返回类型也掩饰一个ostream对象</span></span><br><span class="line"><span class="comment">// 最后ostream类的源码，我们是不可见的，所以我们不能通过成员函数来实现操作符重载，</span></span><br><span class="line"><span class="comment">// 所以这里只能使用友元函数来实现，这也是友元函数的最大用武之地</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现非常简单，只要把s的值传递给ostream对象，然后返回就可以了</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cin-gt-gt-s"><a href="#cin-gt-gt-s" class="headerlink" title="cin &gt;&gt; s;"></a>cin &gt;&gt; s;</h2><p>从键盘键入内容传递给对象也是一个基本的业务，实现方式和cout类似，因此不做过多说明了</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s-i"><a href="#s-i" class="headerlink" title="s[i];"></a>s[i];</h2><p>根据索引获取对象的值，需要对[]操作符进行重载</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// 返回的值一个字符，所以函数的返回类型为char，索引是int型，同时不希望对象被改变，所以用const</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ch[i]; <span class="comment">//直接返回ch的索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s-“abc”-s1-s2"><a href="#s-“abc”-s1-s2" class="headerlink" title="s == “abc”; s1 == s2;"></a>s == “abc”; s1 == s2;</h2><p>判断是否相等有两种情况，一是判断一个对象是否和一个字符串相等，一是判断两个对象是否相等</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//都是一些比较简单的业务逻辑</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>*p) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">      <span class="comment">//strcmp(s1,s2)   s1=s2返回0，s1&gt;s2返回大于0的值，s1&lt;s2返回小于0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整施工"><a href="#完整施工" class="headerlink" title="完整施工"></a>完整施工</h1><p>接下来还有一部分操作符重载，远离都类似就不再展开细讲了，下面给出封装完成的MyString类：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*实现自定义字符串类*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//私有成员变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> Length;</span><br><span class="line">    <span class="keyword">char</span> * ch;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//构造和析构</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyString(<span class="keyword">int</span> length = <span class="number">0</span>);<span class="comment">//对象内存空间分配构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p);<span class="comment">//对象初始化构造函数 </span></span><br><span class="line">    MyString(<span class="keyword">const</span> MyString &amp;obj);<span class="comment">//拷贝构造函数  </span></span><br><span class="line">    ~MyString();<span class="comment">//析构函数  </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//返回长度   </span></span><br><span class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">c_str</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;<span class="comment">//[]操作符   </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;  <span class="comment">//==操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span> * p) <span class="keyword">const</span>;<span class="comment">// !=操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(MyString &amp; s);<span class="comment">// &gt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(MyString &amp; s);<span class="comment">// &lt;操作符  </span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p);</span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *p); <span class="comment">//=操作符 字符串赋值 </span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s); <span class="comment">//=操作符 用一个对象给另一个对象赋值 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp; s); <span class="comment">// &lt;&lt;操作符  </span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp; s); <span class="comment">//  &gt;&gt;操作符  </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line">MyString::MyString(<span class="keyword">int</span> length) &#123;</span><br><span class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> *p) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp;obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = obj.Length;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~MyString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"对象"&lt;&lt;this&lt;&lt;"析构完成"&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造和析构函数======================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"><span class="keyword">int</span> MyString::length() &#123;</span><br><span class="line">    <span class="keyword">return</span> Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * MyString::c_str()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * MyString::c_str() <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数===========================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []操作符重载</span></span><br><span class="line"><span class="keyword">char</span> MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> i)  <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s == "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != <span class="built_in">strlen</span>(p))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">        <span class="comment">//strcmp(s1,s2)相等返回为0，s1 若大于s2 则返回大于0 的值。s1 若小于s2 则返回小于0 的值。</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==操作符重载 调用方式：s1 == s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;Length != s.Length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// !=操作符重载 调用方式：s1 != "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span>* p) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 调用方式：s1 != s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString &amp; s) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> == s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;操作符重载 调用方式：s1 &gt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; s2</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, s.ch) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;操作符重载 调用方式：s1 &lt; "abc"</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;ch, p) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = "abc"</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, <span class="string">""</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =操作符重载 调用方式：s1 = s2</span></span><br><span class="line">MyString &amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp; s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ch != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;ch;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>-&gt;Length = s.Length ;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, s.ch);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数实现的操作符重载==============================================</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; out, MyString &amp;s) &#123;</span><br><span class="line">    out&lt;&lt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in, MyString &amp;s) &#123;</span><br><span class="line">    in&gt;&gt;s.ch;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现的操作符重载==============================================</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>操作符重载</tag>
        <tag>友元函数</tag>
        <tag>对象的构造和析构</tag>
      </tags>
  </entry>
  <entry>
    <title>C++自定义实现MyString类的封装(一)</title>
    <url>/2019/10/29/C-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0MyString%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文通过封装一个自定义的字符串类MyString来讲解C++面向对象的一些基础内容，主要涉及以下几个方面，知识讲解以代码注释为主，这样更容易理解：</p>
<ul>
<li>函数重载</li>
<li>类的构造和析构</li>
<li>const操作符</li>
<li>引用</li>
<li>操作符重载</li>
</ul>
<h1 id="一、-搭建类的框架"><a href="#一、-搭建类的框架" class="headerlink" title="一、 搭建类的框架"></a>一、 搭建类的框架</h1><p>我采用类的声明和类的实现分离的做法，因此这个类会有两个文件，其中MyString.hpp是类的声明，这里定义了类的成员变量和类的成员函数。</p>
<h2 id="MyString-hpp"><a href="#MyString-hpp" class="headerlink" title="MyString.hpp"></a>MyString.hpp</h2><p>我使用的编译器是Xcode，其他编译器的后缀名是.h，关于.hpp和.h不是本文的重点，不作说明，感兴趣的可以自行查找相关文献。</p>
<p>以下代码为新建一个类时，编译器自动生成代码，没有什么难点，因此只做部分注释。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyString_hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyString_hpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once <span class="comment">// 防止头文件被重复引用，多次引用只有一次有效</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MyString_hpp */</span></span></span><br></pre></td></tr></table></figure>

<h2 id="MyString-cpp"><a href="#MyString-cpp" class="headerlink" title="MyString.cpp"></a>MyString.cpp</h2><p>同样由编译器自动生成，不过也可以手动创建，以下为编译器自动生成代码，只有一行，因为还没有做类的成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyString.hpp"</span></span></span><br></pre></td></tr></table></figure>

<h1 id="二、-MyString要实现的基础业务需求"><a href="#二、-MyString要实现的基础业务需求" class="headerlink" title="二、 MyString要实现的基础业务需求"></a>二、 MyString要实现的基础业务需求</h1><p>在实现功能之前先确定类的成员变量，之后实现功能我用调用方式来说明。</p>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>一个字符串首先必须有一个长度，其次就是字符串的内容，因此有了如下的变量声明，同时我们不希望类的内部实现被外界看到，也就是说，我们不希望用户直接对成员变量进行操作，因此这里定义成私有变量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Length;</span><br><span class="line">	<span class="keyword">char</span> * ch;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s"><a href="#MyString-s" class="headerlink" title="MyString s;"></a>MyString s;</h2><p>第一个应用场景就是声明一个变量，这里就需要开始对象的构造了，因此我们需要在MyString.hpp中定义构造函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(); <span class="comment">//在之前的文章里简单的讲解过构造函数和析构函数的语法：函数名和类名相同</span></span><br></pre></td></tr></table></figure>

<p>然后在MyString.cpp文件中实现该函数的业务逻辑：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString()<span class="comment">//类的声明和实现分离语法   类名::函数名()&#123;函数体&#125;</span></span><br><span class="line">&#123;</span><br><span class="line">	Length = <span class="number">0</span>; <span class="comment">//声明时没有赋值，因此字符串的长度应该是0</span></span><br><span class="line">  ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; <span class="comment">//分配内存，多分配一个长度，留给"/0"</span></span><br><span class="line">  <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); <span class="comment">//这时候的字符串是一个空串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s-“abc”"><a href="#MyString-s-“abc”" class="headerlink" title="MyString  s = “abc”;"></a>MyString  s = “abc”;</h2><p>第二个场景是声明的同时初始化一个变量，同样是对象的构造：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p); <span class="comment">//1.我们只是用一下传入的参数，为了防止意外错误，我们不希望这个参数被改变，因此定义成const</span></span><br><span class="line"><span class="comment">//2.同样是构造函数，因此函数名和类名相同，但是接受的参数不同，所以这里就是函数重载。要说明的是：函数重载的判断标准是函数的参数列表，并不是函数的返回类型</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Mystring.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> <span class="keyword">char</span> * p)&#123;</span><br><span class="line">  <span class="comment">//1. 传入的p可能是一个空值，如果是空值，那就和无参构造函数相同</span></span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    Length = <span class="number">0</span>; </span><br><span class="line">    ch = <span class="keyword">new</span> cahr * p[Length + <span class="number">1</span>]; </span><br><span class="line">    <span class="built_in">strcpy</span>(ch, <span class="string">""</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    Length = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p); <span class="comment">//获取传入字符串长度</span></span><br><span class="line">    ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(ch, p);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyString-s1-s2"><a href="#MyString-s1-s2" class="headerlink" title="MyString s1 = s2;"></a>MyString s1 = s2;</h2><p>第三个场景是用一个变量区初始化另一个变量，也是对象的构造，但这里是拷贝构造函数：</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString(<span class="keyword">const</span> MyString &amp; obj); <span class="comment">//用一个对象初始化另一个对象，传入的参数应该是MyString对象，同时我们不需要对obj直接进行操作，也不希望obj在使用过程中被意外的改变，因此将obj定义为一个const引用，在用一个对象初始化另一个对象的时候，编译器就会自动调用拷贝构造函数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::MyString(<span class="keyword">const</span> MyString &amp; obj)&#123;</span><br><span class="line">  <span class="comment">//这里用到了this指针，也可以不用，this指针指明了当前被操作的对象，他也是函数的一个参数，只不过没有显式的定义出来，在c++编译器的内部已经帮我们定义好了</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;Length = obj.Length; <span class="comment">//复制对象的长度</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;ch = <span class="keyword">new</span> <span class="keyword">char</span>[Length + <span class="number">1</span>]; <span class="comment">//分配内存</span></span><br><span class="line">  <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;ch, obj.ch); <span class="comment">//复制对象的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象的析构"><a href="#对象的析构" class="headerlink" title="对象的析构"></a>对象的析构</h2><p>在类封装完成之前，我们还不完全知道哪些地方分配了内存，需要在对象销毁时释放内存空间，因此，对象的析构可以在类的封装结束后再实现，这里先打一个框架，不做实现</p>
<blockquote>
<p>MyString.hpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~MyString();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyString.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyString::~MyString()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后说明: 构造函数和析构函数，我们规定采用public声明，因此上述函数的声明都是在public字段中的</p>
</blockquote>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>操作符重载</tag>
        <tag>友元函数</tag>
        <tag>对象的构造和析构</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C++对象的构造和析构</title>
    <url>/2019/10/22/C-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建一个对象时常常需要某些初始化工作，例如对成员变量的赋值等，但是类的成员变量不能在声明的时候赋值；同样的，在对象被销毁的时候也需要执行某些自动化操作，因此就有了对象的构造和析构函数。</p>
<h1 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>函数名和类相同的特殊成员函数，并且没有任何返回类型的声明。</p>
<h2 id="1-2-调用"><a href="#1-2-调用" class="headerlink" title="1.2 调用"></a>1.2 调用</h2><ul>
<li>编译器自动调用</li>
<li>手动调用</li>
</ul>
<h1 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2. 析构函数"></a>2. 析构函数</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>用于清理对象，没有返回类型声明，函数名为~ClassName()，在对象被销毁时自动调用。</p>
<h2 id="2-2-调用"><a href="#2-2-调用" class="headerlink" title="2.2 调用"></a>2.2 调用</h2><ul>
<li>编译器自动调用</li>
</ul>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>一些近况</title>
    <url>/2019/10/16/%E4%B8%80%E4%BA%9B%E8%BF%91%E5%86%B5/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加来必立评论功能</title>
    <url>/2019/09/29/Hexo%E6%B7%BB%E5%8A%A0%E6%9D%A5%E5%BF%85%E7%AB%8B%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>评论功能是博客网站的一个常用功能，开通评论版块就可以和读者互动起来，Hexo支持多种第三方评论接入，本文以livere（如果打不开网站，可能需要fq）评论为例。</p>
<h1 id="Step1-注册账号"><a href="#Step1-注册账号" class="headerlink" title="Step1:注册账号"></a>Step1:注册账号</h1><blockquote>
<p>官网入口：<a href="https://www.livere.com/" target="_blank" rel="noopener">https://www.livere.com</a></p>
</blockquote>
<p>注册登陆之后选择安装免费的city版，之后你会在你的管理页面看到以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"根据你的秘钥更改"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   (<span class="function"><span class="keyword">function</span><span class="params">(d, s)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line"><span class="actionscript">       j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span></span><br><span class="line"><span class="actionscript">       j.async = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line"><span class="javascript">   &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Step2-创建livere-ejs"><a href="#Step2-创建livere-ejs" class="headerlink" title="Step2: 创建livere.ejs"></a>Step2: 创建livere.ejs</h1><p>在你的主题/layout/_partial/post目录下创建文件livere.ejs，讲上述代码复制进去。</p>
<p>同时在你的主题_config.yml文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">livere:</span><br><span class="line">  enable:true</span><br></pre></td></tr></table></figure>

<h1 id="Step3-加载livere-ejs"><a href="#Step3-加载livere-ejs" class="headerlink" title="Step3: 加载livere.ejs"></a>Step3: 加载livere.ejs</h1><p>接着在_partial目录下的artical.ejs中你想要插入评论的位置（我是直接放在最后）加入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">theme.livere.enable</span> &amp;&amp; <span class="attr">post.comments</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">livere</span>', &#123;</span></span><br><span class="line"><span class="tag">      <span class="attr">key:</span> <span class="attr">post.slug</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">title:</span> <span class="attr">post.title</span>,</span></span><br><span class="line"><span class="tag">      <span class="attr">url:</span> <span class="attr">config.url</span>+<span class="attr">url_for</span>(<span class="attr">post.path</span>)</span></span><br><span class="line"><span class="tag">    &#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<p>好了，大功告成，效果如下：</p>
<p><img src="/imgs/livere.jpg" alt></p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>livere</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加分享功能</title>
    <url>/2019/09/29/hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>本文所用的第三方分享接口是mob，仅供参考，目前存在一个问题，mob提供的js是http协议的，如果你的网站是https协议的，评论功能会被部分浏览器屏蔽（firefox，chrome，edge，360都会屏蔽，目前只知道qq浏览器可以加载，其他浏览器需要手动阻止屏蔽）</p>
<h1 id="Step1-官网注册"><a href="#Step1-官网注册" class="headerlink" title="Step1: 官网注册"></a>Step1: 官网注册</h1><blockquote>
<p>地址：<a href="http://www.mob.com/" target="_blank" rel="noopener">http://www.mob.com/</a></p>
</blockquote>
<p>选择sharesdk，添加应用，用你网站名称命名即可。</p>
<h1 id="Step2-创建share-ejs"><a href="#Step2-创建share-ejs" class="headerlink" title="Step2: 创建share.ejs"></a>Step2: 创建share.ejs</h1><p>在你的主题layout/_partial/post目录下创建share.ejs，写入以下代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-button -mob-share-open"</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"-mob-share-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"-mob-share"</span> <span class="attr">src</span>=<span class="string">"http://f1.webshare.mob.com/code/mob-share.js?appkey=mob_share.appkey&gt;&lt;/script&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;!--MOB SHARE END--&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Step3-加载share-ejs"><a href="#Step3-加载share-ejs" class="headerlink" title="Step3: 加载share.ejs"></a>Step3: 加载share.ejs</h1><p>在你的主题_config.yml文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mob_share: </span><br><span class="line">  enable: true</span><br><span class="line">  appkey: 填你自己的appkey</span><br></pre></td></tr></table></figure>

<p>接着在_partial目录下的artical.ejs中你想要插入分享的位置加入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.mob_share.enable)&#123; %&gt;</span><br><span class="line">   &lt;%- partial(&apos;post/share&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>至此你的博客网站就有了分享功能了。</p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>mob</tag>
      </tags>
  </entry>
  <entry>
    <title>map/reduce/filter函数</title>
    <url>/2019/09/26/map-reduce-filter%E5%87%BD%E6%95%B0-md/</url>
    <content><![CDATA[<p>map/reduce/fliter 是python中较为常用的内建高阶函数（一个函数接收另一个函数作为参数，这种函数称之为高阶函数）</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="调用形式"><a href="#调用形式" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>map(function,sequence)</p>
</blockquote>
<p>解析：sequence是一个序列，function是一个函数，map函数对sequence中的每一个元素依次将其传入并执行function函数，最终将结果作为一个list返回，python3中返回的是一个迭代器。</p>
<h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">res = map(square, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res'</span>), res, list(res))</span><br><span class="line"><span class="comment"># python3中map返回的是一个迭代器，要转化为列表或者元祖才能看到想要的输出</span></span><br><span class="line">res2 = map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># map函数同样适用于lambda匿名函数</span></span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res2'</span>), res2, list(res2))</span><br><span class="line"><span class="comment"># 进阶应用</span></span><br><span class="line">funcs = [square, double]</span><br><span class="line">res3 = map(<span class="keyword">lambda</span> func: func(<span class="number">3</span>), funcs)</span><br><span class="line">print(list(res3))</span><br></pre></td></tr></table></figure>

<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>res &lt;map object at 0x7f5b949eb940&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>res2 &lt;map object at 0x7f5b949eba20&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>[9, 6]</p>
</blockquote>
<p><br><br></p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><h3 id="调用形式-1"><a href="#调用形式-1" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>reduce(functions,sequence)</p>
</blockquote>
<p>解析：先将sequence的前两个值传入function，function的返回值和sequence的下一个值作为function新的两个参数，以此迭代</p>
<h4 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># reduce函数包含在functools模块中</span></span><br><span class="line">res4 = reduce(<span class="keyword">lambda</span> x ,y : x +y ,[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)])</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;'</span>.format(<span class="string">'res4:'</span>), res4)</span><br></pre></td></tr></table></figure>

<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>res4: 4950</p>
</blockquote>
<p><br><br></p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><h3 id="调用形式-2"><a href="#调用形式-2" class="headerlink" title="调用形式"></a>调用形式</h3><blockquote>
<p>filter(function,sequence)</p>
</blockquote>
<p>解析：将sequence中的元素依次传入function，将返回值为True的元素组成一个list/tuple/string（取决于sequence类型，python3返回迭代器）</p>
<h4 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res5 = filter(<span class="keyword">lambda</span> x: x % <span class="number">3</span> == <span class="number">0</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)])</span><br><span class="line">print(list(res5))</span><br></pre></td></tr></table></figure>

<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p>[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48]</p>
</blockquote>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><li>map/reduce/filter为函数式编程提供了很多便利，可以让代码更加简洁
</li><li>map/reduce/filter在python2中返回的是基本数据类型，python3返回迭代器
</li>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>高阶函数</tag>
      </tags>
  </entry>
</search>
